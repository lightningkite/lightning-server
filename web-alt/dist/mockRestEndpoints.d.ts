import { Condition } from "./Condition";
import { Modification } from "./Modification";
import { Query, MassModification, EntryChange, GroupCountQuery, AggregateQuery, GroupAggregateQuery, DeepPartial, QueryPartial } from "./otherModels";
import { HasId } from "./sessionRest";
export declare function mockRestEndpointFunctions<T extends HasId>(items: T[], label: string): {
    default(userToken?: string): Promise<T>;
    query(input: Query<T>, userToken?: string): Promise<Array<T>>;
    queryPartial(input: QueryPartial<T>, userToken?: string): Promise<Array<DeepPartial<T>>>;
    detail(id: string, userToken?: string): Promise<T>;
    insertBulk(input: Array<T>, userToken?: string): Promise<Array<T>>;
    insert(input: T, userToken?: string): Promise<T>;
    upsert(id: string, input: T, userToken?: string): Promise<T>;
    bulkReplace(input: Array<T>, userToken?: string): Promise<Array<T>>;
    replace(id: string, input: T, userToken?: string): Promise<T>;
    bulkModify(input: MassModification<T>, userToken?: string): Promise<number>;
    modifyWithDiff(id: string, input: Modification<T>, userToken?: string): Promise<EntryChange<T>>;
    modify(id: string, input: Modification<T>, userToken?: string): Promise<T>;
    bulkDelete(input: Condition<T>, userToken?: string): Promise<number>;
    delete(id: string, userToken?: string): Promise<void>;
    count(input: Condition<T>, userToken?: string): Promise<number>;
    groupCount(input: GroupCountQuery<T>, userToken?: string): Promise<Record<string, number>>;
    aggregate(input: AggregateQuery<T>, userToken?: string): Promise<number>;
    groupAggregate(input: GroupAggregateQuery<T>, userToken?: string): Promise<Record<string, number>>;
};
