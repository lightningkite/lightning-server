// Package: com.lightningkite.lightningdb.mock
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import Foundation

public final class MockWriteModelApi<Model : HasId> : WriteModelApi<Model> where Model.ID == UUID {
    public var table: MockTable<Model>
    public init(table: MockTable<Model>) {
        self.table = table
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    override public func post(_ value: Model) -> Single<Model> {
        return Single.just(self.table.addItem(item: value));
    }
    
    override public func postBulk(values: Array<Model>) -> Single<Array<Model>> {
        return Single.just(values.map({ (it) -> Model in self.table.addItem(item: it) }));
    }
    
    override public func put(_ value: Model) -> Single<Model> {
        return Single.just(self.table.replaceItem(item: value));
    }
    
    override public func putBulk(values: Array<Model>) -> Single<Array<Model>> {
        return Single.just(values.map({ (it) -> Model in self.table.replaceItem(item: it) }));
    }
    
    override public func patch(id: UUIDFor<Model>, modification: Modification<Model>) -> Single<Model> {
        return (self.table.data[id]).map { (item) in
            let modified = modification.invoke(on: item)
            self.table.replaceItem(item: modified)
            return Single.just(modified)
        } ?? Single.error(ItemNotFound(message: "404 item with key \(id) not found"));
    }
    
    override public func patchBulk(modification: MassModification<Model>) -> Single<Int> {
        return Single.just(self.table
                .asList()
                .filter({ (it) -> Bool in modification.condition.invoke(on: it) })
            .map({ (it) -> Model in self.table.replaceItem(item: modification.modification.invoke(on: it)) }))
            .map { (it) -> Int in Int(it.count) };
    }
    
    override public func delete(id: UUIDFor<Model>) -> Single<Void> {
        return Single.just(self.table.deleteItemById(id: id));
    }
    
    override public func deleteBulk(_ condition: Condition<Model>) -> Single<Void> {
        return Single.just(self.table
                .asList()
                .filter({ (it) -> Bool in condition.invoke(on: it) })
            .forEach({ (it) -> Void in self.table.deleteItem(item: it) }));
    }
}
