// Package: com.lightningkite.lightningdb.live
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwiftPlus
import Foundation

public final class LiveCompleteModelApi<Model : HasId> : CompleteModelApi<Model> {
    private var _read: ReadModelApi<Model>
    override public var read: ReadModelApi<Model> { get { return self._read } set(value) { self._read = value } }
    private var _write: WriteModelApi<Model>
    override public var write: WriteModelApi<Model> { get { return self._write } set(value) { self._write = value } }
    private var _observe: ObserveModelApi<Model>
    override public var observe: ObserveModelApi<Model> { get { return self._observe } set(value) { self._observe = value } }
    public init(read: ReadModelApi<Model>, write: WriteModelApi<Model>, observe: ObserveModelApi<Model>) {
        self._read = read
        self._write = write
        self._observe = observe
        super.init()
        //Necessary properties should be initialized now
    }
    
    
}
public final class LiveCompleteModelApiCompanion {
    public init() {
        //Necessary properties should be initialized now
    }
    public static let INSTANCE = LiveCompleteModelApiCompanion()
    
    public func create<Model : HasId>(root: String, multiplexSocketUrl: String, path: String, token: String, headers: Dictionary<String, String> = dictionaryOf()) -> LiveCompleteModelApi<Model> {
        return LiveCompleteModelApi<Model>(read: LiveReadModelApiCompanion.INSTANCE.create(root: root, path: path, token: token, headers: headers), write: LiveWriteModelApiCompanion.INSTANCE.create(root: root, path: path, token: token, headers: headers), observe: LiveObserveModelApiCompanion.INSTANCE.create(multiplexUrl: multiplexSocketUrl, token: token, headers: headers, path: path));
    }
}
