// Package: com.lightningkite.lightningserver.auth
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import Foundation

public final class EmailPinLogin : CustomStringConvertible, Hashable, Codable {
    public var email: String
    public var pin: String
    public init(email: String, pin: String) {
        self.email = email
        self.pin = pin
        //Necessary properties should be initialized now
    }
    convenience required public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.init(
            email: try values.decode(String.self, forKey: .email),
            pin: try values.decode(String.self, forKey: .pin)
        )
    }
    
    enum CodingKeys: String, CodingKey {
        case email = "email"
        case pin = "pin"
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.email, forKey: .email)
        try container.encode(self.pin, forKey: .pin)
    }
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(email)
        hasher.combine(pin)
        
    }
    public static func == (lhs: EmailPinLogin, rhs: EmailPinLogin) -> Bool { return lhs.email == rhs.email && lhs.pin == rhs.pin }
    public var description: String { return "EmailPinLogin(email=\(String(kotlin: self.email)), pin=\(String(kotlin: self.pin)))" }
    public func copy(email: String? = nil, pin: String? = nil) -> EmailPinLogin { return EmailPinLogin(email: email ?? self.email, pin: pin ?? self.pin) }
    
}

public final class PhonePinLogin : CustomStringConvertible, Hashable, Codable {
    public var phone: String
    public var pin: String
    public init(phone: String, pin: String) {
        self.phone = phone
        self.pin = pin
        //Necessary properties should be initialized now
    }
    convenience required public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.init(
            phone: try values.decode(String.self, forKey: .phone),
            pin: try values.decode(String.self, forKey: .pin)
        )
    }
    
    enum CodingKeys: String, CodingKey {
        case phone = "phone"
        case pin = "pin"
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.phone, forKey: .phone)
        try container.encode(self.pin, forKey: .pin)
    }
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(phone)
        hasher.combine(pin)
        
    }
    public static func == (lhs: PhonePinLogin, rhs: PhonePinLogin) -> Bool { return lhs.phone == rhs.phone && lhs.pin == rhs.pin }
    public var description: String { return "PhonePinLogin(phone=\(String(kotlin: self.phone)), pin=\(String(kotlin: self.pin)))" }
    public func copy(phone: String? = nil, pin: String? = nil) -> PhonePinLogin { return PhonePinLogin(phone: phone ?? self.phone, pin: pin ?? self.pin) }
    
}
