// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import Foundation

public func startChain<T : Codable & Hashable>() -> KeyPath<T, T> {
    return KeyPath(mapCondition: { (it) -> Condition<T> in it }, mapModification: { (it) -> Modification<T> in it }, getProp: { (it) -> T in it }, setProp: { (_, it) -> T in it });
}
public final class KeyPath<From : Codable & Hashable, To : Codable & Hashable> : KStringable {
    public var mapCondition: (Condition<To>) -> Condition<From>
    public var mapModification: (Modification<To>) -> Modification<From>
    public var getProp: (From) -> To
    public var setProp: (From, To) -> From
    public init(mapCondition: @escaping (Condition<To>) -> Condition<From>, mapModification: @escaping (Modification<To>) -> Modification<From>, getProp: @escaping (From) -> To, setProp: @escaping (From, To) -> From) {
        self.mapCondition = mapCondition
        self.mapModification = mapModification
        self.getProp = getProp
        self.setProp = setProp
        //Necessary properties should be initialized now
    }
    
    public func get<V : Codable & Hashable>(prop: PropertyIterableProperty<To, V>) -> KeyPath<From, V> {
        return KeyPath<From, V>(mapCondition: { (it) -> Condition<From> in self.mapCondition(ConditionOnField(key: prop, condition: it)) }, mapModification: { (it) -> Modification<From> in self.mapModification(ModificationOnField(key: prop, modification: it)) }, getProp: { (it) -> V in prop.get(self.getProp(it)) }, setProp: { (from, to) -> From in self.setProp(from, prop.set(self.getProp(from), to)) });
    }
    
    //    override fun hashCode(): Int = mapCondition(Condition.Always()).hashCode()
    
    public func toString() -> String {
        return "KeyPath(\(self.mapCondition(ConditionAlways())))";
    }
    
    //    @Suppress("UNCHECKED_CAST")
    //    override fun equals(other: Any?): Boolean = other is KeyPath<*, *> && mapCondition(Condition.Always()) == (other as KeyPath<Any?, Any?>).mapCondition(Condition.Always())
}

public func condition<T : Codable & Hashable>(setup: @escaping (KeyPath<T, T>) -> Condition<T>) -> Condition<T> {
    return (setup)((startChain() as KeyPath<T, T>));
}

public func modification<T : Codable & Hashable>(setup: @escaping (KeyPath<T, T>) -> Modification<T>) -> Modification<T> {
    return (setup)((startChain() as KeyPath<T, T>));
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    var always: Condition<To> {
        get { return ConditionAlways() }
    }
}
public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    var never: Condition<To> {
        get { return ConditionNever() }
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func eq(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionEqual(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func neq(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionNotEqual(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func ne(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionNotEqual(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func inside(values: Array<To>) -> Condition<From> {
        return self.mapCondition(ConditionInside(values: values));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func nin(values: Array<To>) -> Condition<From> {
        return self.mapCondition(ConditionNotInside(values: values));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func notIn(values: Array<To>) -> Condition<From> {
        return self.mapCondition(ConditionNotInside(values: values));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable & Comparable {
    func gt(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionGreaterThan(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable & Comparable {
    func lt(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionLessThan(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable & Comparable {
    func gte(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionGreaterThanOrEqual(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable & Comparable {
    func lte(_ value: To) -> Condition<From> {
        return self.mapCondition(ConditionLessThanOrEqual(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To == Int {
    func allClear(mask: Int) -> Condition<From> {
        return self.mapCondition(ConditionIntBitsClear(mask: mask));
    }
}
public extension KeyPath where From : Codable & Hashable, To == Int {
    func allSet(mask: Int) -> Condition<From> {
        return self.mapCondition(ConditionIntBitsSet(mask: mask));
    }
}
public extension KeyPath where From : Codable & Hashable, To == Int {
    func anyClear(mask: Int) -> Condition<From> {
        return self.mapCondition(ConditionIntBitsAnyClear(mask: mask));
    }
}

public extension KeyPath where From : Codable & Hashable, To == Int {
    func anySet(mask: Int) -> Condition<From> {
        return self.mapCondition(ConditionIntBitsAnySet(mask: mask));
    }
}
public extension KeyPath where From : Codable & Hashable, To == String {
    func contains(_ value: String) -> Condition<From> {
        return self.mapCondition(ConditionStringContains(value, ignoreCase: true));
    }
}

public extension KeyPath where From : Codable & Hashable, To == String {
    func contains(_ value: String, ignoreCase: Bool) -> Condition<From> {
        return self.mapCondition(ConditionStringContains(value, ignoreCase: ignoreCase));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func fullTextSearch(_ value: String, ignoreCase: Bool) -> Condition<From> {
        return self.mapCondition(ConditionFullTextSearch(value, ignoreCase: ignoreCase));
    }
}

public func xKeyPathAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Condition<K> {
    return this.mapCondition(ConditionListAllElements((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathAny<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Condition<K> {
    return this.mapCondition(ConditionListAnyElements((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathSizesEquals<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, count: Int) -> Condition<K> {
    return this.mapCondition(ConditionListSizesEquals(count: count));
}

public func xKeyPathAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Condition<K> {
    return this.mapCondition(ConditionSetAllElements((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathAny<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Condition<K> {
    return this.mapCondition(ConditionSetAnyElements((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathSizesEquals<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, count: Int) -> Condition<K> {
    return this.mapCondition(ConditionSetSizesEquals(count: count));
}

public func xKeyPathContainsKey<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Dictionary<String, T>>, key: String) -> Condition<K> {
    return this.mapCondition(ConditionExists(key: key));
}

public func getKeyPathNotNull<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, T?>) -> KeyPath<K, T> {
    return (KeyPath(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionIfNotNull(it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationIfNotNull(it)) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it)! } as (K) -> T, setProp: { (it, value) -> K in this.setProp(it, value) } as (K, T) -> K) as KeyPath<K, T>);
}


public func xKeyPathGet<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Dictionary<String, T>>, key: String) -> KeyPath<K, T> {
    return (KeyPath<K, T>(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionOnKey(key: key, condition: it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationModifyByKey(dictionaryOf(Pair(key, it)))) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it)[key]! } as (K) -> T, setProp: { (from, to) -> K in this.setProp(from, (this.getProp(from) + dictionaryOf(Pair(key, to)))) } as (K, T) -> K) as KeyPath<K, T>);
}

public func getKeyPathAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>) -> KeyPath<K, T> {
    return (KeyPath(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionListAllElements(it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationListPerElement(condition: ConditionAlways(), modification: it)) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it).first! } as (K) -> T, setProp: { (from, to) -> K in this.setProp(from, (this.getProp(from) + [to])) } as (K, T) -> K) as KeyPath<K, T>);
}


public func getKeyPathAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>) -> KeyPath<K, T> {
    return (KeyPath(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionSetAllElements(it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationSetPerElement(condition: ConditionAlways(), modification: it)) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it).first() } as (K) -> T, setProp: { (from, to) -> K in this.setProp(from, this.getProp(from).union([to])) } as (K, T) -> K) as KeyPath<K, T>);
}


public func getKeyPathAny<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>) -> KeyPath<K, T> {
    return (KeyPath(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionListAnyElements(it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationListPerElement(condition: ConditionAlways(), modification: it)) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it).first! } as (K) -> T, setProp: { (from, to) -> K in this.setProp(from, (this.getProp(from) + [to])) } as (K, T) -> K) as KeyPath<K, T>);
}


public func getKeyPathAny<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>) -> KeyPath<K, T> {
    return (KeyPath(mapCondition: { (it) -> Condition<K> in this.mapCondition(ConditionSetAnyElements(it)) } as (Condition<T>) -> Condition<K>, mapModification: { (it) -> Modification<K> in this.mapModification(ModificationSetPerElement(condition: ConditionAlways(), modification: it)) } as (Modification<T>) -> Modification<K>, getProp: { (it) -> T in this.getProp(it).first() } as (K) -> T, setProp: { (from, to) -> K in this.setProp(from, this.getProp(from).union([to])) } as (K, T) -> K) as KeyPath<K, T>);
}


public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func condition(make: @escaping (KeyPath<To, To>) -> Condition<To>) -> Condition<From> {
        return self.mapCondition(make((startChain() as KeyPath<To, To>)));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func modification(make: @escaping (KeyPath<To, To>) -> Modification<To>) -> Modification<From> {
        return self.mapModification(make((startChain() as KeyPath<To, To>)));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Codable & Hashable {
    func assign(_ value: To) -> Modification<From> {
        return self.mapModification(ModificationAssign(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Comparable {
    func coerceAtMost(_ value: To) -> Modification<From> {
        return self.mapModification(ModificationCoerceAtMost(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Comparable {
    func coerceAtLeast(_ value: To) -> Modification<From> {
        return self.mapModification(ModificationCoerceAtLeast(value));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Number {
    func plus(by: To) -> Modification<From> {
        return self.mapModification(ModificationIncrement(by: by));
    }
}

public extension KeyPath where From : Codable & Hashable, To : Number {
    func times(by: To) -> Modification<From> {
        return self.mapModification(ModificationMultiply(by: by));
    }
}

public extension KeyPath where From : Codable & Hashable, To == String {
    func plus(_ value: String) -> Modification<From> {
        return self.mapModification(ModificationAppendString(value));
    }
}

public func xKeyPathPlus<K : Codable & Hashable, T>(_ this: KeyPath<K, Array<T>>, items: Array<T>) -> Modification<K> {
    return this.mapModification(ModificationListAppend(items: items));
}

public func xKeyPathPlus<K : Codable & Hashable, T>(_ this: KeyPath<K, Set<T>>, items: Set<T>) -> Modification<K> {
    return this.mapModification(ModificationSetAppend(items: items));
}

public func xKeyPathPlus<K : Codable & Hashable, T>(_ this: KeyPath<K, Array<T>>, item: T) -> Modification<K> {
    return this.mapModification(ModificationListAppend(items: [item]));
}

public func xKeyPathPlus<K : Codable & Hashable, T>(_ this: KeyPath<K, Set<T>>, item: T) -> Modification<K> {
    return this.mapModification(ModificationSetAppend(items: ([item] as Set<T>)));
}

public func xKeyPathAddAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, items: Array<T>) -> Modification<K> {
    return this.mapModification(ModificationListAppend(items: items));
}

public func xKeyPathAddAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, items: Set<T>) -> Modification<K> {
    return this.mapModification(ModificationSetAppend(items: items));
}

public func xKeyPathRemoveAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Modification<K> {
    return this.mapModification(ModificationListRemove((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathRemoveAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>) -> Modification<K> {
    return this.mapModification(ModificationSetRemove((condition)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathRemoveAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, items: Array<T>) -> Modification<K> {
    return this.mapModification(ModificationListRemoveInstances(items: items));
}

public func xKeyPathRemoveAll<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, items: Set<T>) -> Modification<K> {
    return this.mapModification(ModificationSetRemoveInstances(items: items));
}

public func xKeyPathDropLast<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>) -> Modification<K> {
    return this.mapModification(ModificationListDropLast());
}

public func xKeyPathDropLast<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>) -> Modification<K> {
    return this.mapModification(ModificationSetDropLast());
}

public func xKeyPathDropFirst<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>) -> Modification<K> {
    return this.mapModification(ModificationListDropFirst());
}

public func xKeyPathDropFirst<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>) -> Modification<K> {
    return this.mapModification(ModificationSetDropFirst());
}

public func xKeyPathMap<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, modification: @escaping (KeyPath<T, T>) -> Modification<T>) -> Modification<K> {
    return this.mapModification(ModificationListPerElement(condition: ConditionAlways(), modification: (modification)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathMap<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, modification: @escaping (KeyPath<T, T>) -> Modification<T>) -> Modification<K> {
    return this.mapModification(ModificationSetPerElement(condition: ConditionAlways(), modification: (modification)((startChain() as KeyPath<T, T>))));
}

public func xKeyPathMapIf<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Array<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>, modification: @escaping (KeyPath<T, T>) -> Modification<T>) -> Modification<K> {
    return this.mapModification(
        ModificationListPerElement(condition: (condition)((startChain() as KeyPath<T, T>)), modification: (modification)((startChain() as KeyPath<T, T>)))
    );
}

public func xKeyPathMapIf<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Set<T>>, condition: @escaping (KeyPath<T, T>) -> Condition<T>, modification: @escaping (KeyPath<T, T>) -> Modification<T>) -> Modification<K> {
    return this.mapModification(
        ModificationSetPerElement(condition: (condition)((startChain() as KeyPath<T, T>)), modification: (modification)((startChain() as KeyPath<T, T>)))
    );
}

public func xKeyPathPlus<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Dictionary<String, T>>, _ map: Dictionary<String, T>) -> Modification<K> {
    return this.mapModification(ModificationCombine(map));
}

public func xKeyPathModifyByKey<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Dictionary<String, T>>, _ map: Dictionary<String, (KeyPath<T, T>) -> Modification<T>>) -> Modification<K> {
    return this.mapModification(ModificationModifyByKey(map.mapValuesFromPairs({ (it) -> Modification<T> in (it.value)((startChain() as KeyPath<T, T>)) })));
}

public func xKeyPathRemoveKeys<K : Codable & Hashable, T : Codable & Hashable>(_ this: KeyPath<K, Dictionary<String, T>>, fields: Set<String>) -> Modification<K> {
    return this.mapModification(ModificationRemoveKeys(fields: fields));
}

