// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - this file will be overwritten.
import { Condition } from './Condition'
import { Modification } from './Modification'
import { PropChain, startChain } from './dsl'
import { Comparable, EqualOverrideSet, also } from '@lightningkite/khrysalis-runtime'
import { map } from 'iter-tools-es'

//! Declares com.lightningkite.lightningdb.modification
export function modification<T extends any>(setup: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): Modification<T> {
    return also(new ModificationBuilder<T>(), (this_: ModificationBuilder<T>): void => {
        setup(this_, startChain<T>());
    }).build();
}

//! Declares com.lightningkite.lightningdb.ModificationBuilder
export class ModificationBuilder<K extends any> {
    public constructor() {
        this.modifications = ([] as Array<Modification<K>>);
    }
    
    public readonly modifications: Array<Modification<K>>;
    public build(): Modification<K> {
        return ((): (Modification<K> | null) => {
            const temp2 = this.modifications;
            return (temp2.length == 1 ? temp2[0] : null)
        })() ?? new Modification.Chain<K>(this.modifications);
    }
    
    public xPropChainAssign<T extends any>(this_: PropChain<K, T>, value: T): void {
        this.modifications.push(this_.mapModification(new Modification.Assign<T>(value)));
    }
    
    public xPropChainCoerceAtMost<T extends Comparable<T>>(this_: PropChain<K, T>, value: T): void {
        this.modifications.push(this_.mapModification(new Modification.CoerceAtMost<T>(value)));
    }
    
    public xPropChainCoerceAtLeast<T extends Comparable<T>>(this_: PropChain<K, T>, value: T): void {
        this.modifications.push(this_.mapModification(new Modification.CoerceAtLeast<T>(value)));
    }
    
    public xPropChainPlusNumberOld<T extends number>(this_: PropChain<K, T>, by: T): void {
        this.modifications.push(this_.mapModification(new Modification.Increment<T>(by)));
    }
    
    public xPropChainTimes<T extends number>(this_: PropChain<K, T>, by: T): void {
        this.modifications.push(this_.mapModification(new Modification.Multiply<T>(by)));
    }
    
    public xPropChainPlusStringOld(this_: PropChain<K, string>, value: string): void {
        this.modifications.push(this_.mapModification(new Modification.AppendString(value)));
    }
    
    public xPropChainPlusItemsListOld<T>(this_: PropChain<K, Array<T>>, items: Array<T>): void {
        this.modifications.push(this_.mapModification(new Modification.ListAppend<T>(items)));
    }
    
    public xPropChainPlusItemsSetOld<T>(this_: PropChain<K, Set<T>>, items: Set<T>): void {
        this.modifications.push(this_.mapModification(new Modification.SetAppend<T>(items)));
    }
    
    public xPropChainPlusItemListOld<T>(this_: PropChain<K, Array<T>>, item: T): void {
        this.modifications.push(this_.mapModification(new Modification.ListAppend<T>([item])));
    }
    
    public xPropChainPlusItemSetOld<T>(this_: PropChain<K, Set<T>>, item: T): void {
        this.modifications.push(this_.mapModification(new Modification.SetAppend<T>(new EqualOverrideSet([item]))));
    }
    
    public xPropChainPlusNumber<T extends number>(this_: PropChain<K, T>, by: T): void {
        this.modifications.push(this_.mapModification(new Modification.Increment<T>(by)));
    }
    
    public xPropChainTimesAssign<T extends number>(this_: PropChain<K, T>, by: T): void {
        this.modifications.push(this_.mapModification(new Modification.Multiply<T>(by)));
    }
    
    public xPropChainPlusString(this_: PropChain<K, string>, value: string): void {
        this.modifications.push(this_.mapModification(new Modification.AppendString(value)));
    }
    
    public xPropChainPlusItemsList<T>(this_: PropChain<K, Array<T>>, items: Array<T>): void {
        this.modifications.push(this_.mapModification(new Modification.ListAppend<T>(items)));
    }
    
    public xPropChainPlusItemsSet<T>(this_: PropChain<K, Set<T>>, items: Set<T>): void {
        this.modifications.push(this_.mapModification(new Modification.SetAppend<T>(items)));
    }
    
    public xPropChainPlusItemList<T>(this_: PropChain<K, Array<T>>, item: T): void {
        this.modifications.push(this_.mapModification(new Modification.ListAppend<T>([item])));
    }
    
    public xPropChainPlusItemSet<T>(this_: PropChain<K, Set<T>>, item: T): void {
        this.modifications.push(this_.mapModification(new Modification.SetAppend<T>(new EqualOverrideSet([item]))));
    }
    
    public xPropChainListAddAll<T extends any>(this_: PropChain<K, Array<T>>, items: Array<T>): void {
        this.modifications.push(this_.mapModification(new Modification.ListAppend<T>(items)));
    }
    
    public xPropChainSetAddAll<T extends any>(this_: PropChain<K, Set<T>>, items: Set<T>): void {
        this.modifications.push(this_.mapModification(new Modification.SetAppend<T>(items)));
    }
    
    public xPropChainListRemove<T extends any>(this_: PropChain<K, Array<T>>, condition: ((a: PropChain<T, T>) => Condition<T>)): void {
        this.modifications.push(this_.mapModification(new Modification.ListRemove<T>((condition)(startChain<T>()))));
    }
    
    public xPropChainSetRemove<T extends any>(this_: PropChain<K, Set<T>>, condition: ((a: PropChain<T, T>) => Condition<T>)): void {
        this.modifications.push(this_.mapModification(new Modification.SetRemove<T>((condition)(startChain<T>()))));
    }
    
    public xPropChainListRemoveAll<T extends any>(this_: PropChain<K, Array<T>>, items: Array<T>): void {
        this.modifications.push(this_.mapModification(new Modification.ListRemoveInstances<T>(items)));
    }
    
    public xPropChainSetRemoveAll<T extends any>(this_: PropChain<K, Set<T>>, items: Set<T>): void {
        this.modifications.push(this_.mapModification(new Modification.SetRemoveInstances<T>(items)));
    }
    
    public xPropChainListDropLast<T extends any>(this_: PropChain<K, Array<T>>): void {
        this.modifications.push(this_.mapModification(new Modification.ListDropLast<T>()));
    }
    
    public xPropChainSetDropLast<T extends any>(this_: PropChain<K, Set<T>>): void {
        this.modifications.push(this_.mapModification(new Modification.SetDropLast<T>()));
    }
    
    public xPropChainListDropFirst<T extends any>(this_: PropChain<K, Array<T>>): void {
        this.modifications.push(this_.mapModification(new Modification.ListDropFirst<T>()));
    }
    
    public xPropChainSetDropFirst<T extends any>(this_: PropChain<K, Set<T>>): void {
        this.modifications.push(this_.mapModification(new Modification.SetDropFirst<T>()));
    }
    
    public xPropChainListMap<T extends any>(this_: PropChain<K, Array<T>>, modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void {
        this.modifications.push(this_.mapModification(
            new Modification.ListPerElement<T>(new Condition.Always<T>(), also(new ModificationBuilder<T>(), (this_1: ModificationBuilder<T>): void => {
                modification(this_1, startChain<T>());
            }).build())
        ));
    }
    
    public xPropChainSetMap<T extends any>(this_: PropChain<K, Set<T>>, modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void {
        this.modifications.push(this_.mapModification(
            new Modification.SetPerElement<T>(new Condition.Always<T>(), also(new ModificationBuilder<T>(), (this_1: ModificationBuilder<T>): void => {
                modification(this_1, startChain<T>());
            }).build())
        ));
    }
    
    public xPropChainListMapIf<T extends any>(this_: PropChain<K, Array<T>>, condition: ((a: PropChain<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void {
        this.modifications.push(this_.mapModification(
            new Modification.ListPerElement<T>((condition)(startChain<T>()), also(new ModificationBuilder<T>(), (this_1: ModificationBuilder<T>): void => {
                modification(this_1, startChain<T>());
            }).build())
        ));
    }
    
    public xPropChainSetMapIf<T extends any>(this_: PropChain<K, Set<T>>, condition: ((a: PropChain<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void {
        this.modifications.push(this_.mapModification(
            new Modification.SetPerElement<T>((condition)(startChain<T>()), also(new ModificationBuilder<T>(), (this_1: ModificationBuilder<T>): void => {
                modification(this_1, startChain<T>());
            }).build())
        ));
    }
    
    public xPropChainPlusMap<T extends any>(this_: PropChain<K, Map<string, T>>, map: Map<string, T>): void {
        this.modifications.push(this_.mapModification(new Modification.Combine<T>(map)));
    }
    
    public xPropChainModifyByKey<T extends any>(this_: PropChain<K, Map<string, T>>, modifications: Map<string, ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)>): void {
        this.modifications.push(this_.mapModification(new Modification.ModifyByKey<T>(new Map(map(x => [x[0], ((it: [string, (a: ModificationBuilder<T>, b: PropChain<T, T>) => void]): Modification<T> => (modification<T>(it[1])))(x)], modifications.entries())))));
    }
    
    public xPropChainRemoveKeys<T extends any>(this_: PropChain<K, Map<string, T>>, fields: Set<string>): void {
        this.modifications.push(this_.mapModification(new Modification.RemoveKeys<T>(fields)));
    }
    
}