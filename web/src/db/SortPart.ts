// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - customized.
import { DataClassPathAccess, DataClassPathPartial, DataClassPathSelf } from './DataClassPath'
import {Comparator, ReifiedType, TProperty1, setUpDataClass, safeCompare} from '@lightningkite/khrysalis-runtime'

//! Declares com.lightningkite.lightningdb.SortPart
export class SortPart<T extends any> {
    public constructor(public readonly field: DataClassPathPartial<T>, public readonly ascending: boolean = true, public readonly ignoreCase: boolean = false) {
    }
    public static properties = ["field", "ascending", "ignoreCase"]
    public static propertyTypes(T: ReifiedType) { return {field: [DataClassPathPartial, T], ascending: [Boolean], ignoreCase: [Boolean]} }
    copy: (values: Partial<SortPart<T>>) => this;
    equals: (other: any) => boolean;
    hashCode: () => number;
    
    public static constructorKProperty1comSortPartTAnyBooleanBoolean<T extends any>(field: TProperty1<T, any>, ascending: boolean = true, ignoreCase: boolean = false) {
        let result = new SortPart<T>(new DataClassPathAccess<T, T, (any | null)>(new DataClassPathSelf<T>(), field), ascending, ignoreCase);
        
        return result;
    }
}
setUpDataClass(SortPart)

//! Declares com.lightningkite.lightningdb.comparator>kotlin.collections.Listcom.lightningkite.lightningdb.SortPartcom.lightningkite.lightningdb.comparator.T
export function xListComparatorGet<T extends any>(this_: Array<SortPart<T>>): (Comparator<T> | null) {
    if (this_.length === 0) { return null }
    return (a: T, b: T): number => {
        for (const part of this_) {
            if (part.ignoreCase) {
                const aString = part.field.getAny(a) as string;
                const bString = part.field.getAny(b) as string;
                const result = aString.toLowerCase().compareTo(bString)
                if (!(result === 0)) { return part.ascending ? result : (-result) }
            } else {
                const result = safeCompare(a, b);
                if (!(result === 0)) { return part.ascending ? result : (-result) }
            }
        }
        return 0;
    };
}
