// Package: com.lightningkite.lightningdb
// Generated by Khrysalis, then edited
import { path } from './ConditionBuilder'
import { DataClassPath } from './DataClassPath'
import { SortPart } from './SortPart'
import { also } from '@lightningkite/khrysalis-runtime'

//! Declares com.lightningkite.lightningdb.sort
export function sort<T extends any>(setup: ((a: SortBuilder<T>, b: DataClassPath<T, T>) => void)): Array<SortPart<T>> {
    return also(new SortBuilder<T>(), (this_: SortBuilder<T>): void => {
        setup(this_, path<T>());
    }).build();
}

//! Declares com.lightningkite.lightningdb.SortBuilder
export class SortBuilder<K extends any> {
    public constructor() {
        this.sortParts = ([] as Array<SortPart<K>>);
    }
    
    public readonly sortParts: Array<SortPart<K>>;
    public add(sort: SortPart<K>): void { this.sortParts.push(sort); }
    public build(): Array<SortPart<K>> {
        return Array.from(this.sortParts);
    }
    public ascending<V>(this_: DataClassPath<K, V>): SortPart<K> {
        return new SortPart<K>(this_, true, undefined);
    }
    public descending<V>(this_: DataClassPath<K, V>): SortPart<K> {
        return new SortPart<K>(this_, false, undefined);
    }
    public ascendingString(this_: DataClassPath<K, string>, ignoreCase: boolean): SortPart<K> {
        return new SortPart<K>(this_, true, ignoreCase);
    }
    public descendingString(this_: DataClassPath<K, string>, ignoreCase: boolean): SortPart<K> {
        return new SortPart<K>(this_, false, ignoreCase);
    }
}