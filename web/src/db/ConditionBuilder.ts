// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - this file will be overwritten.
import { Condition } from './Condition'
import { DataClassPath, DataClassPathSelf } from './DataClassPath'
import { toArray } from 'iter-tools-es'

//! Declares com.lightningkite.lightningdb.path
export function path<T extends any>(): DataClassPath<T, T> {
    return new DataClassPathSelf<T>();
}

//! Declares com.lightningkite.lightningdb.condition
export function condition<T extends any>(setup: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<T> {
    return (setup)(path<T>());
}

//! Declares com.lightningkite.lightningdb.always>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.always.K, com.lightningkite.lightningdb.always.K
export function xDataClassPathAlwaysGet<K extends any>(this_: DataClassPath<K, K>): Condition<K> { return new Condition.Always<K>(); }

//! Declares com.lightningkite.lightningdb.never>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.never.K, com.lightningkite.lightningdb.never.K
export function xDataClassPathNeverGet<K extends any>(this_: DataClassPath<K, K>): Condition<K> { return new Condition.Never<K>(); }


//! Declares com.lightningkite.lightningdb.eq>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.eq.K, com.lightningkite.lightningdb.eq.T
export function xDataClassPathEq<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.Equal<T>(value));
}
//! Declares com.lightningkite.lightningdb.neq>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.neq.K, com.lightningkite.lightningdb.neq.T
export function xDataClassPathNeq<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.NotEqual<T>(value));
}
//! Declares com.lightningkite.lightningdb.ne>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.ne.K, com.lightningkite.lightningdb.ne.T
export function xDataClassPathNe<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.NotEqual<T>(value));
}
//! Declares com.lightningkite.lightningdb.inside>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.inside.K, com.lightningkite.lightningdb.inside.T
export function xDataClassPathInsideSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K> {
    return this_.mapCondition(new Condition.Inside<T>(toArray(values)));
}
//! Declares com.lightningkite.lightningdb.inside>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.inside.K, com.lightningkite.lightningdb.inside.T
export function xDataClassPathInside<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K> {
    return this_.mapCondition(new Condition.Inside<T>(values));
}
//! Declares com.lightningkite.lightningdb.nin>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.nin.K, com.lightningkite.lightningdb.nin.T
export function xDataClassPathNinSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K> {
    return this_.mapCondition(new Condition.NotInside<T>(toArray(values)));
}
//! Declares com.lightningkite.lightningdb.nin>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.nin.K, com.lightningkite.lightningdb.nin.T
export function xDataClassPathNin<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K> {
    return this_.mapCondition(new Condition.NotInside<T>(values));
}
//! Declares com.lightningkite.lightningdb.notIn>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.notIn.K, com.lightningkite.lightningdb.notIn.T
export function xDataClassPathNotInSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K> {
    return this_.mapCondition(new Condition.NotInside<T>(toArray(values)));
}
//! Declares com.lightningkite.lightningdb.notIn>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.notIn.K, com.lightningkite.lightningdb.notIn.T
export function xDataClassPathNotIn<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K> {
    return this_.mapCondition(new Condition.NotInside<T>(values));
}
//! Declares com.lightningkite.lightningdb.gt>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.gt.K, com.lightningkite.lightningdb.gt.T
export function xDataClassPathGt<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.GreaterThan<T>(value));
}
//! Declares com.lightningkite.lightningdb.lt>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.lt.K, com.lightningkite.lightningdb.lt.T
export function xDataClassPathLt<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.LessThan<T>(value));
}
//! Declares com.lightningkite.lightningdb.gte>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.gte.K, com.lightningkite.lightningdb.gte.T
export function xDataClassPathGte<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.GreaterThanOrEqual<T>(value));
}
//! Declares com.lightningkite.lightningdb.lte>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.lte.K, com.lightningkite.lightningdb.lte.T
export function xDataClassPathLte<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K> {
    return this_.mapCondition(new Condition.LessThanOrEqual<T>(value));
}
//! Declares com.lightningkite.lightningdb.allClear>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.allClear.K, kotlin.Int
export function xDataClassPathAllClear<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K> {
    return this_.mapCondition(new Condition.IntBitsClear(mask));
}
//! Declares com.lightningkite.lightningdb.allSet>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.allSet.K, kotlin.Int
export function xDataClassPathAllSet<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K> {
    return this_.mapCondition(new Condition.IntBitsSet(mask));
}
//! Declares com.lightningkite.lightningdb.anyClear>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.anyClear.K, kotlin.Int
export function xDataClassPathAnyClear<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K> {
    return this_.mapCondition(new Condition.IntBitsAnyClear(mask));
}
//! Declares com.lightningkite.lightningdb.anySet>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.anySet.K, kotlin.Int
export function xDataClassPathAnySet<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K> {
    return this_.mapCondition(new Condition.IntBitsAnySet(mask));
}
//! Declares com.lightningkite.lightningdb.contains>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.contains.K, kotlin.String
export function xDataClassPathContains<K extends any>(this_: DataClassPath<K, string>, value: string): Condition<K> {
    return this_.mapCondition(new Condition.StringContains(value, true));
}
//! Declares com.lightningkite.lightningdb.contains>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.contains.K, kotlin.String
export function xDataClassPathContainsCased<K extends any>(this_: DataClassPath<K, string>, value: string, ignoreCase: boolean): Condition<K> {
    return this_.mapCondition(new Condition.StringContains(value, ignoreCase));
}
//! Declares com.lightningkite.lightningdb.fullTextSearch>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.fullTextSearch.K, com.lightningkite.lightningdb.fullTextSearch.V
export function xDataClassPathFullTextSearch<K extends any, V extends any>(this_: DataClassPath<K, V>, value: string, ignoreCase: boolean): Condition<K> {
    return this_.mapCondition(new Condition.FullTextSearch<V>(value, ignoreCase));
}
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Listcom.lightningkite.lightningdb.all.T
export function xDataClassPathListAll<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K> {
    return this_.mapCondition(new Condition.ListAllElements<T>((condition)(path<T>())));
}
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Listcom.lightningkite.lightningdb.any.T
export function xDataClassPathListAny<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K> {
    return this_.mapCondition(new Condition.ListAnyElements<T>((condition)(path<T>())));
}
//! Declares com.lightningkite.lightningdb.sizesEquals>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.sizesEquals.K, kotlin.collections.Listcom.lightningkite.lightningdb.sizesEquals.T
export function xDataClassPathListSizedEqual<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, count: number): Condition<K> {
    return this_.mapCondition(new Condition.ListSizesEquals<T>(count));
}
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Setcom.lightningkite.lightningdb.all.T
export function xDataClassPathSetAll<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K> {
    return this_.mapCondition(new Condition.SetAllElements<T>((condition)(path<T>())));
}
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Setcom.lightningkite.lightningdb.any.T
export function xDataClassPathSetAny<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K> {
    return this_.mapCondition(new Condition.SetAnyElements<T>((condition)(path<T>())));
}
//! Declares com.lightningkite.lightningdb.sizesEquals>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.sizesEquals.K, kotlin.collections.Setcom.lightningkite.lightningdb.sizesEquals.T
export function xDataClassPathSetSizedEqual<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, count: number): Condition<K> {
    return this_.mapCondition(new Condition.SetSizesEquals<T>(count));
}
//! Declares com.lightningkite.lightningdb.containsKey>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.containsKey.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.containsKey.T
export function xDataClassPathContainsKey<K extends any, T extends any>(this_: DataClassPath<K, Map<string, T>>, key: string): Condition<K> {
    return this_.mapCondition(new Condition.Exists<T>(key));
}
//! Declares com.lightningkite.lightningdb.condition>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.condition.K, com.lightningkite.lightningdb.condition.T
export function xDataClassPathCondition<K extends any, T extends any>(this_: DataClassPath<K, T>, make: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K> {
    return this_.mapCondition(make(path<T>()));
}
