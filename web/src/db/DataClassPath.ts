// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - customized.
import { Condition } from './Condition'
import { Modification } from './Modification'
import { keySet } from './TProperty1Extensions'
import { EqualOverrideSet, ReifiedType, TProperty1, reflectiveGet, setUpDataClass } from '@lightningkite/khrysalis-runtime'
import { firstOr } from 'iter-tools-es'

//! Declares com.lightningkite.lightningdb.DataClassPathPartial
export abstract class DataClassPathPartial<K extends any> {
    protected constructor() {
    }
    
    public abstract getAny(key: K): (any | null)
    public abstract setAny(key: K, any: (any | null)): K
    public abstract readonly properties: Array<TProperty1<any, any>>;
    public abstract hashCode(): number
    public abstract toString(): string
    public abstract equals(other: (any | null)): boolean
}

//! Declares com.lightningkite.lightningdb.DataClassPath
export abstract class DataClassPath<K extends any, V extends any> extends DataClassPathPartial<K> {
    protected constructor() {
        super();
    }
    
    public abstract get(key: K): (V | null)
    public abstract set(key: K, value: V): K
    public getAny(key: K): (any | null) {
        return this.get(key);
    }
    public setAny(key: K, any: (any | null)): K {
        return this.set(key, any as V);
    }
    public abstract mapCondition(condition: Condition<V>): Condition<K>
    public abstract mapModification(modification: Modification<V>): Modification<K>
    
    public prop<V2>(prop: TProperty1<V, V2>): DataClassPathAccess<K, V, V2> {
        return new DataClassPathAccess<K, V, V2>(this, prop);
    }
}

//! Declares com.lightningkite.lightningdb.DataClassPathSelf
export class DataClassPathSelf<K extends any> extends DataClassPath<K, K> {
    public constructor() {
        super();
    }
    
    public get(key: K): (K | null) {
        return key;
    }
    public set(key: K, value: K): K {
        return value;
    }
    public toString(): string {
        return "this";
    }
    public hashCode(): number {
        return 0;
    }
    public equals(other: (any | null)): boolean {
        return other instanceof DataClassPathSelf;
    }
    //! Declares com.lightningkite.lightningdb.DataClassPathSelf.properties
    public get properties(): Array<TProperty1<any, any>> { return []; }
    
    public mapCondition(condition: Condition<K>): Condition<K> {
        return condition;
    }
    public mapModification(modification: Modification<K>): Modification<K> {
        return modification;
    }
}
//! Declares com.lightningkite.lightningdb.DataClassPathAccess
export class DataClassPathAccess<K extends any, M extends any, V extends any> extends DataClassPath<K, V> {
    public constructor(public readonly first: DataClassPath<K, M>, public readonly second: TProperty1<M, V>) {
        super();
    }
    public static properties = ["first", "second"]
    public static propertyTypes(K: ReifiedType, M: ReifiedType, V: ReifiedType) { return {first: [DataClassPath, K, M], second: [String, M, V]} }
    copy: (values: Partial<DataClassPathAccess<K, M, V>>) => this;
    equals: (other: any) => boolean;
    hashCode: () => number;
    
    public get(key: K): (V | null) {
        return ((): (V | null) => {
            const temp0 = this.first.get(key);
            if (temp0 === null || temp0 === undefined) { return null }
            return ((it: M): V => (reflectiveGet(it, this.second)))(temp0)
        })();
    }
    public set(key: K, value: V): K {
        return ((): (K | null) => {
            const temp3 = this.first.get(key);
            if (temp3 === null || temp3 === undefined) { return null }
            return ((it: M): K => (this.first.set(key, keySet(it, this.second, value))))(temp3)
        })() ?? key;
    }
    public toString(): string {
        return this.first instanceof DataClassPathSelf ? `${this.second}` : `${this.first}.${this.second}`;
    }
    //! Declares com.lightningkite.lightningdb.DataClassPathAccess.properties
    public get properties(): Array<TProperty1<any, any>> { return this.first.properties.concat([`${this.second}`]); }
    
    public mapCondition(condition: Condition<V>): Condition<K> {
        return this.first.mapCondition(new Condition.OnField<M, V>(this.second, condition));
    }
    public mapModification(modification: Modification<V>): Modification<K> {
        return this.first.mapModification(new Modification.OnField<M, V>(this.second, modification));
    }
}
setUpDataClass(DataClassPathAccess)
//! Declares com.lightningkite.lightningdb.DataClassPathNotNull
export class DataClassPathNotNull<K extends any, V extends any> extends DataClassPath<K, V> {
    public constructor(public readonly wraps: DataClassPath<K, (V | null)>) {
        super();
    }
    public static properties = ["wraps"]
    public static propertyTypes(K: ReifiedType, V: ReifiedType) { return {wraps: [DataClassPath, K, V]} }
    copy: (values: Partial<DataClassPathNotNull<K, V>>) => this;
    equals: (other: any) => boolean;
    hashCode: () => number;
    
    //! Declares com.lightningkite.lightningdb.DataClassPathNotNull.properties
    public get properties(): Array<TProperty1<any, any>> { return this.wraps.properties; }
    
    
    public get(key: K): (V | null) {
        return this.wraps.get(key);
    }
    public set(key: K, value: V): K {
        return this.wraps.set(key, value);
    }
    public toString(): string {
        return `${this.wraps}?`;
    }
    public mapCondition(condition: Condition<V>): Condition<K> {
        return this.wraps.mapCondition(new Condition.IfNotNull<V>(condition));
    }
    public mapModification(modification: Modification<V>): Modification<K> {
        return this.wraps.mapModification(new Modification.IfNotNull<V>(modification));
    }
}
setUpDataClass(DataClassPathNotNull)
//! Declares com.lightningkite.lightningdb.DataClassPathList
export class DataClassPathList<K extends any, V extends any> extends DataClassPath<K, V> {
    public constructor(public readonly wraps: DataClassPath<K, Array<V>>) {
        super();
    }
    public static properties = ["wraps"]
    public static propertyTypes(K: ReifiedType, V: ReifiedType) { return {wraps: [DataClassPath, K, [Array, V]]} }
    copy: (values: Partial<DataClassPathList<K, V>>) => this;
    equals: (other: any) => boolean;
    hashCode: () => number;
    
    //! Declares com.lightningkite.lightningdb.DataClassPathList.properties
    public get properties(): Array<TProperty1<any, any>> { return this.wraps.properties; }
    
    
    public get(key: K): (V | null) {
        return ((): (V | null) => {
            const temp10 = this.wraps.get(key);
            if (temp10 === null || temp10 === undefined) { return null }
            return (temp10[0] ?? null)
        })();
    }
    public set(key: K, value: V): K {
        return this.wraps.set(key, [value]);
    }
    public toString(): string {
        return `${this.wraps}.*`;
    }
    public mapCondition(condition: Condition<V>): Condition<K> {
        return this.wraps.mapCondition(new Condition.ListAllElements<V>(condition));
    }
    public mapModification(modification: Modification<V>): Modification<K> {
        return this.wraps.mapModification(new Modification.ListPerElement<V>(new Condition.Always<V>(), modification));
    }
}
setUpDataClass(DataClassPathList)
//! Declares com.lightningkite.lightningdb.DataClassPathSet
export class DataClassPathSet<K extends any, V extends any> extends DataClassPath<K, V> {
    public constructor(public readonly wraps: DataClassPath<K, Set<V>>) {
        super();
    }
    public static properties = ["wraps"]
    public static propertyTypes(K: ReifiedType, V: ReifiedType) { return {wraps: [DataClassPath, K, [Set, V]]} }
    copy: (values: Partial<DataClassPathSet<K, V>>) => this;
    equals: (other: any) => boolean;
    hashCode: () => number;
    
    //! Declares com.lightningkite.lightningdb.DataClassPathSet.properties
    public get properties(): Array<TProperty1<any, any>> { return this.wraps.properties; }
    
    
    public get(key: K): (V | null) {
        return ((): (V | null) => {
            const temp11 = this.wraps.get(key);
            if (temp11 === null || temp11 === undefined) { return null }
            return firstOr(null, temp11)!
        })();
    }
    public set(key: K, value: V): K {
        return this.wraps.set(key, new EqualOverrideSet([value]));
    }
    public toString(): string {
        return `${this.wraps}.*`;
    }
    public mapCondition(condition: Condition<V>): Condition<K> {
        return this.wraps.mapCondition(new Condition.SetAllElements<V>(condition));
    }
    public mapModification(modification: Modification<V>): Modification<K> {
        return this.wraps.mapModification(new Modification.SetPerElement<V>(new Condition.Always<V>(), modification));
    }
}
setUpDataClass(DataClassPathSet)

//! Declares com.lightningkite.lightningdb.notNull>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.notNull.K, com.lightningkite.lightningdb.notNull.V
export function notNullGet<K extends any, V extends any>(this_: DataClassPath<K, (V | null)>): DataClassPathNotNull<K, V> { return new DataClassPathNotNull<K, V>(this_); }

//! Declares com.lightningkite.lightningdb.elements>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.elements.K, kotlin.collections.Listcom.lightningkite.lightningdb.elements.V
export function listElementsGet<K extends any, V extends any>(this_: DataClassPath<K, Array<V>>): DataClassPathList<K, V> { return new DataClassPathList<K, V>(this_); }

//! Declares com.lightningkite.lightningdb.elements>com.lightningkite.lightningdb.DataClassPathcom.lightningkite.lightningdb.elements.K, kotlin.collections.Setcom.lightningkite.lightningdb.elements.V
export function setElementsGet<K extends any, V extends any>(this_: DataClassPath<K, Set<V>>): DataClassPathSet<K, V> { return new DataClassPathSet<K, V>(this_); }

