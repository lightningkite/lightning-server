"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xObservableFilter = exports.xObservableToListObservable = exports.LiveObserveModelApi = void 0;
// Package: com.lightningkite.lightningdb.live
// Generated by Khrysalis - this file will be overwritten.
const ObserveModelApi_1 = require("../ObserveModelApi");
const ListChange_1 = require("../db/ListChange");
const Query_1 = require("../db/Query");
const SortPart_1 = require("../db/SortPart");
const sockets_1 = require("./sockets");
const khrysalis_runtime_1 = require("@lightningkite/khrysalis-runtime");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
//! Declares com.lightningkite.lightningdb.live.LiveObserveModelApi
class LiveObserveModelApi extends ObserveModelApi_1.ObserveModelApi {
    constructor(openSocket) {
        super();
        this.openSocket = openSocket;
        this.alreadyOpen = new khrysalis_runtime_1.EqualOverrideMap();
    }
    observe(query) {
        //multiplexedSocket<ListChange<Model>, Query<Model>>("$multiplexUrl?jwt=$token", path)
        return (0, khrysalis_runtime_1.xMutableMapGetOrPut)(this.alreadyOpen, query, () => (this.openSocket(query)
            .pipe((0, operators_1.tap)({ unsubscribe: () => {
                this.alreadyOpen.delete(query);
            } }))
            .pipe((0, operators_1.publishReplay)(1))
            .pipe((0, operators_1.refCount)())));
    }
}
exports.LiveObserveModelApi = LiveObserveModelApi;
(function (LiveObserveModelApi) {
    //! Declares com.lightningkite.lightningdb.live.LiveObserveModelApi.Companion
    class Companion {
        constructor() {
        }
        create(Model, multiplexUrl, token, headers, path) {
            return new LiveObserveModelApi((query) => {
                var _a;
                return (xObservableToListObservable((0, sockets_1.multiplexedSocketReified)([ListChange_1.ListChange, Model], [Query_1.Query, Model], multiplexUrl, path, new Map([["jwt", [token]]]))
                    .pipe((0, operators_1.switchMap)((it) => {
                    it.send(query);
                    return it.messages.pipe((0, operators_1.catchError)((it) => (rxjs_1.NEVER)));
                })), (_a = (0, SortPart_1.xListComparatorGet)(query.orderBy)) !== null && _a !== void 0 ? _a : (0, khrysalis_runtime_1.compareBy)((it) => (it._id))));
            });
        }
    }
    Companion.INSTANCE = new Companion();
    LiveObserveModelApi.Companion = Companion;
})(LiveObserveModelApi = exports.LiveObserveModelApi || (exports.LiveObserveModelApi = {}));
//! Declares com.lightningkite.lightningdb.live.toListObservable>io.reactivex.rxjava3.core.Observablecom.lightningkite.lightningdb.ListChangecom.lightningkite.lightningdb.live.toListObservable.T
function xObservableToListObservable(this_, ordering) {
    const localList = [];
    return this_.pipe((0, operators_1.map)((it) => {
        const it_12 = it.wholeList;
        if (it_12 !== null) {
            localList.length = 0;
            localList.push(...it_12.slice().sort(ordering));
        }
        const it_14 = it._new;
        if (it_14 !== null) {
            (0, khrysalis_runtime_1.listRemoveAll)(localList, (o) => ((0, khrysalis_runtime_1.safeEq)(it_14._id, o._id)));
            let index = localList.findIndex((inList) => (ordering(it_14, inList) < 0));
            if (index === (-1)) {
                index = localList.length;
            }
            localList.splice(index, 0, it_14);
        }
        else {
            const it_21 = it.old;
            if (it_21 !== null) {
                (0, khrysalis_runtime_1.listRemoveAll)(localList, (o) => ((0, khrysalis_runtime_1.safeEq)(it_21._id, o._id)));
            }
        }
        return localList;
    }));
}
exports.xObservableToListObservable = xObservableToListObservable;
//! Declares com.lightningkite.lightningdb.live.filter>io.reactivex.rxjava3.core.Observablecom.lightningkite.lightningdb.live.WebSocketIshcom.lightningkite.lightningdb.ListChangecom.lightningkite.lightningdb.live.filter.T, com.lightningkite.lightningdb.Querycom.lightningkite.lightningdb.live.filter.T
function xObservableFilter(this_, query) {
    var _a;
    return xObservableToListObservable(this_
        .pipe((0, operators_1.delay)(200))
        .pipe((0, operators_1.tap)((it) => {
        it.send(query);
    }))
        .pipe((0, operators_1.switchMap)((it) => (it.messages)))
        .pipe((0, operators_1.retryWhen)((it) => (it.pipe((0, operators_1.delay)(5000))))), (_a = (0, SortPart_1.xListComparatorGet)(query.orderBy)) !== null && _a !== void 0 ? _a : (0, khrysalis_runtime_1.compareBy)((it) => (it._id)));
}
exports.xObservableFilter = xObservableFilter;
//# sourceMappingURL=LiveObserveModelApi.js.map