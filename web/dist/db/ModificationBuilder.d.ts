import { Condition } from './Condition';
import { DataClassPath } from './DataClassPath';
import { Modification } from './Modification';
import { Comparable } from '@lightningkite/khrysalis-runtime';
export declare function modification<T extends any>(setup: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): Modification<T>;
export declare function xModificationAnd<T extends any>(this_: Modification<T>, setup: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): Modification<T>;
export declare class ModificationBuilder<K extends any> {
    constructor();
    readonly modifications: Array<Modification<K>>;
    add(modification: Modification<K>): void;
    build(): Modification<K>;
    assign<T extends any>(this_: DataClassPath<K, T>, value: T): void;
    coerceAtMost<T extends Comparable<T>>(this_: DataClassPath<K, T>, value: T): void;
    coerceAtLeast<T extends Comparable<T>>(this_: DataClassPath<K, T>, value: T): void;
    plusAssignNumber<T extends number>(this_: DataClassPath<K, T>, by: T): void;
    timesAssign<T extends number>(this_: DataClassPath<K, T>, by: T): void;
    plusAssignString(this_: DataClassPath<K, string>, value: string): void;
    plusAssignList<T>(this_: DataClassPath<K, Array<T>>, items: Array<T>): void;
    plusAssignSet<T>(this_: DataClassPath<K, Set<T>>, items: Set<T>): void;
    plusAssignItemList<T>(this_: DataClassPath<K, Array<T>>, item: T): void;
    plusAssignItemSet<T>(this_: DataClassPath<K, Set<T>>, item: T): void;
    plusAssignListAddAll<T extends any>(this_: DataClassPath<K, Array<T>>, items: Array<T>): void;
    plusAssignSetAddAll<T extends any>(this_: DataClassPath<K, Set<T>>, items: Set<T>): void;
    removeAllList<T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): void;
    removeAllSet<T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): void;
    removeAllItemsList<T extends any>(this_: DataClassPath<K, Array<T>>, items: Array<T>): void;
    removeAllItemsSet<T extends any>(this_: DataClassPath<K, Set<T>>, items: Set<T>): void;
    dropLastList<T extends any>(this_: DataClassPath<K, Array<T>>): void;
    dropLastSet<T extends any>(this_: DataClassPath<K, Set<T>>): void;
    dropFirstList<T extends any>(this_: DataClassPath<K, Array<T>>): void;
    dropFirstSet<T extends any>(this_: DataClassPath<K, Set<T>>): void;
    forEachList<T extends any>(this_: DataClassPath<K, Array<T>>, modification: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): void;
    forEachSet<T extends any>(this_: DataClassPath<K, Set<T>>, modification: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): void;
    forEachIfList<T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): void;
    forEachIfSet<T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)): void;
    plusAssignMap<T extends any>(this_: DataClassPath<K, Map<string, T>>, map: Map<string, T>): void;
    modifyByKey<T extends any>(this_: DataClassPath<K, Map<string, T>>, byKey: Map<string, ((a: ModificationBuilder<T>, b: DataClassPath<T, T>) => void)>): void;
    removeKeys<T extends any>(this_: DataClassPath<K, Map<string, T>>, fields: Set<string>): void;
}
