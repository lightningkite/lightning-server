import { Condition } from './Condition';
import { Modification } from './Modification';
import { PropChain } from './dsl';
import { Comparable } from '@lightningkite/khrysalis-runtime';
export declare function modification<T extends any>(setup: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): Modification<T>;
export declare class ModificationBuilder<K extends any> {
    constructor();
    readonly modifications: Array<Modification<K>>;
    build(): Modification<K>;
    xPropChainAssign<T extends any>(this_: PropChain<K, T>, value: T): void;
    xPropChainCoerceAtMost<T extends Comparable<T>>(this_: PropChain<K, T>, value: T): void;
    xPropChainCoerceAtLeast<T extends Comparable<T>>(this_: PropChain<K, T>, value: T): void;
    xPropChainPlusNumberOld<T extends number>(this_: PropChain<K, T>, by: T): void;
    xPropChainTimes<T extends number>(this_: PropChain<K, T>, by: T): void;
    xPropChainPlusStringOld(this_: PropChain<K, string>, value: string): void;
    xPropChainPlusItemsListOld<T>(this_: PropChain<K, Array<T>>, items: Array<T>): void;
    xPropChainPlusItemsSetOld<T>(this_: PropChain<K, Set<T>>, items: Set<T>): void;
    xPropChainPlusItemListOld<T>(this_: PropChain<K, Array<T>>, item: T): void;
    xPropChainPlusItemSetOld<T>(this_: PropChain<K, Set<T>>, item: T): void;
    xPropChainPlusNumber<T extends number>(this_: PropChain<K, T>, by: T): void;
    xPropChainTimesAssign<T extends number>(this_: PropChain<K, T>, by: T): void;
    xPropChainPlusString(this_: PropChain<K, string>, value: string): void;
    xPropChainPlusItemsList<T>(this_: PropChain<K, Array<T>>, items: Array<T>): void;
    xPropChainPlusItemsSet<T>(this_: PropChain<K, Set<T>>, items: Set<T>): void;
    xPropChainPlusItemList<T>(this_: PropChain<K, Array<T>>, item: T): void;
    xPropChainPlusItemSet<T>(this_: PropChain<K, Set<T>>, item: T): void;
    xPropChainListAddAll<T extends any>(this_: PropChain<K, Array<T>>, items: Array<T>): void;
    xPropChainSetAddAll<T extends any>(this_: PropChain<K, Set<T>>, items: Set<T>): void;
    xPropChainListRemove<T extends any>(this_: PropChain<K, Array<T>>, condition: ((a: PropChain<T, T>) => Condition<T>)): void;
    xPropChainSetRemove<T extends any>(this_: PropChain<K, Set<T>>, condition: ((a: PropChain<T, T>) => Condition<T>)): void;
    xPropChainListRemoveAll<T extends any>(this_: PropChain<K, Array<T>>, items: Array<T>): void;
    xPropChainSetRemoveAll<T extends any>(this_: PropChain<K, Set<T>>, items: Set<T>): void;
    xPropChainListDropLast<T extends any>(this_: PropChain<K, Array<T>>): void;
    xPropChainSetDropLast<T extends any>(this_: PropChain<K, Set<T>>): void;
    xPropChainListDropFirst<T extends any>(this_: PropChain<K, Array<T>>): void;
    xPropChainSetDropFirst<T extends any>(this_: PropChain<K, Set<T>>): void;
    xPropChainListMap<T extends any>(this_: PropChain<K, Array<T>>, modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void;
    xPropChainSetMap<T extends any>(this_: PropChain<K, Set<T>>, modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void;
    xPropChainListMapIf<T extends any>(this_: PropChain<K, Array<T>>, condition: ((a: PropChain<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void;
    xPropChainSetMapIf<T extends any>(this_: PropChain<K, Set<T>>, condition: ((a: PropChain<T, T>) => Condition<T>), modification: ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)): void;
    xPropChainPlusMap<T extends any>(this_: PropChain<K, Map<string, T>>, map: Map<string, T>): void;
    xPropChainModifyByKey<T extends any>(this_: PropChain<K, Map<string, T>>, modifications: Map<string, ((a: ModificationBuilder<T>, b: PropChain<T, T>) => void)>): void;
    xPropChainRemoveKeys<T extends any>(this_: PropChain<K, Map<string, T>>, fields: Set<string>): void;
}
