"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xKeyPathSetAddAll = exports.xKeyPathListAddAll = exports.xKeyPathPlusItemSet = exports.xKeyPathPlusItemList = exports.xKeyPathPlusItemsSet = exports.xKeyPathPlusItemsList = exports.xKeyPathPlusString = exports.xKeyPathTimes = exports.xKeyPathPlusNumber = exports.xKeyPathCoerceAtLeast = exports.xKeyPathCoerceAtMost = exports.xKeyPathAssign = exports.xKeyPathModification = exports.xKeyPathCondition = exports.xKeyPathSetAnyGet = exports.xKeyPathListAnyGet = exports.xKeyPathSetAllGet = exports.xKeyPathListAllGet = exports.xKeyPathGet = exports.xKeyPathNotNullGet = exports.xKeyPathContainsKey = exports.xKeyPathSetSizedEqual = exports.xKeyPathSetAny = exports.xKeyPathSetAll = exports.xKeyPathListSizedEqual = exports.xKeyPathListAny = exports.xKeyPathListAll = exports.xKeyPathFullTextSearch = exports.xKeyPathContainsCased = exports.xKeyPathContains = exports.xKeyPathAnySet = exports.xKeyPathAnyClear = exports.xKeyPathAllSet = exports.xKeyPathAllClear = exports.xKeyPathLte = exports.xKeyPathGte = exports.xKeyPathLt = exports.xKeyPathGt = exports.xKeyPathNotIn = exports.xKeyPathNin = exports.xKeyPathInside = exports.xKeyPathNe = exports.xKeyPathNeq = exports.xKeyPathEq = exports.xKeyPathNeverGet = exports.xKeyPathAlwaysGet = exports.modification = exports.condition = exports.KeyPath = exports.startChain = void 0;
exports.xKeyPathRemoveKeys = exports.xKeyPathModifyByKey = exports.xKeyPathPlusMap = exports.xKeyPathSetMapIf = exports.xKeyPathListMapIf = exports.xKeyPathSetMap = exports.xKeyPathListMap = exports.xKeyPathSetDropFirst = exports.xKeyPathListDropFirst = exports.xKeyPathSetDropLast = exports.xKeyPathListDropLast = exports.xKeyPathSetRemoveAll = exports.xKeyPathListRemoveAll = exports.xKeyPathSetRemove = exports.xKeyPathListRemove = void 0;
// Package: com.lightningkite.lightningdb
// Generated by Khrysalis - this file will be overwritten.
const Condition_1 = require("./Condition");
const Modification_1 = require("./Modification");
const TProperty1Extensions_1 = require("./TProperty1Extensions");
const khrysalis_runtime_1 = require("@lightningkite/khrysalis-runtime");
const iter_tools_es_1 = require("iter-tools-es");
//! Declares com.lightningkite.lightningdb.startChain
function startChain() {
    return new KeyPath((it) => (it), (it) => (it), (it) => (it), (_0, it) => (it));
}
exports.startChain = startChain;
//! Declares com.lightningkite.lightningdb.KeyPath
class KeyPath {
    constructor(mapCondition, mapModification, getProp, setProp) {
        this.mapCondition = mapCondition;
        this.mapModification = mapModification;
        this.getProp = getProp;
        this.setProp = setProp;
    }
    get(prop) {
        return new KeyPath((it) => (this.mapCondition(new Condition_1.Condition.OnField(prop, it))), (it) => (this.mapModification(new Modification_1.Modification.OnField(prop, it))), (it) => ((0, khrysalis_runtime_1.reflectiveGet)(this.getProp(it), prop)), (from, to) => (this.setProp(from, (0, TProperty1Extensions_1.keySet)(this.getProp(from), prop, to))));
    }
    //    override fun hashCode(): Int = mapCondition(Condition.Always()).hashCode()
    toString() {
        return `KeyPath(${this.mapCondition(new Condition_1.Condition.Always())})`;
    }
}
exports.KeyPath = KeyPath;
//! Declares com.lightningkite.lightningdb.condition
function condition(setup) {
    return (setup)(startChain());
}
exports.condition = condition;
//! Declares com.lightningkite.lightningdb.modification
function modification(setup) {
    return (setup)(startChain());
}
exports.modification = modification;
//! Declares com.lightningkite.lightningdb.always>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.always.K, com.lightningkite.lightningdb.always.K
function xKeyPathAlwaysGet(this_) { return new Condition_1.Condition.Always(); }
exports.xKeyPathAlwaysGet = xKeyPathAlwaysGet;
//! Declares com.lightningkite.lightningdb.never>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.never.K, com.lightningkite.lightningdb.never.K
function xKeyPathNeverGet(this_) { return new Condition_1.Condition.Never(); }
exports.xKeyPathNeverGet = xKeyPathNeverGet;
//! Declares com.lightningkite.lightningdb.eq>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.eq.K, com.lightningkite.lightningdb.eq.T
function xKeyPathEq(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.Equal(value));
}
exports.xKeyPathEq = xKeyPathEq;
//! Declares com.lightningkite.lightningdb.neq>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.neq.K, com.lightningkite.lightningdb.neq.T
function xKeyPathNeq(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.NotEqual(value));
}
exports.xKeyPathNeq = xKeyPathNeq;
//! Declares com.lightningkite.lightningdb.ne>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.ne.K, com.lightningkite.lightningdb.ne.T
function xKeyPathNe(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.NotEqual(value));
}
exports.xKeyPathNe = xKeyPathNe;
//! Declares com.lightningkite.lightningdb.inside>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.inside.K, com.lightningkite.lightningdb.inside.T
function xKeyPathInside(this_, values) {
    return this_.mapCondition(new Condition_1.Condition.Inside(values));
}
exports.xKeyPathInside = xKeyPathInside;
//! Declares com.lightningkite.lightningdb.nin>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.nin.K, com.lightningkite.lightningdb.nin.T
function xKeyPathNin(this_, values) {
    return this_.mapCondition(new Condition_1.Condition.NotInside(values));
}
exports.xKeyPathNin = xKeyPathNin;
//! Declares com.lightningkite.lightningdb.notIn>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.notIn.K, com.lightningkite.lightningdb.notIn.T
function xKeyPathNotIn(this_, values) {
    return this_.mapCondition(new Condition_1.Condition.NotInside(values));
}
exports.xKeyPathNotIn = xKeyPathNotIn;
//! Declares com.lightningkite.lightningdb.gt>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.gt.K, com.lightningkite.lightningdb.gt.T
function xKeyPathGt(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.GreaterThan(value));
}
exports.xKeyPathGt = xKeyPathGt;
//! Declares com.lightningkite.lightningdb.lt>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.lt.K, com.lightningkite.lightningdb.lt.T
function xKeyPathLt(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.LessThan(value));
}
exports.xKeyPathLt = xKeyPathLt;
//! Declares com.lightningkite.lightningdb.gte>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.gte.K, com.lightningkite.lightningdb.gte.T
function xKeyPathGte(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.GreaterThanOrEqual(value));
}
exports.xKeyPathGte = xKeyPathGte;
//! Declares com.lightningkite.lightningdb.lte>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.lte.K, com.lightningkite.lightningdb.lte.T
function xKeyPathLte(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.LessThanOrEqual(value));
}
exports.xKeyPathLte = xKeyPathLte;
//! Declares com.lightningkite.lightningdb.allClear>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.allClear.K, kotlin.Int
function xKeyPathAllClear(this_, mask) {
    return this_.mapCondition(new Condition_1.Condition.IntBitsClear(mask));
}
exports.xKeyPathAllClear = xKeyPathAllClear;
//! Declares com.lightningkite.lightningdb.allSet>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.allSet.K, kotlin.Int
function xKeyPathAllSet(this_, mask) {
    return this_.mapCondition(new Condition_1.Condition.IntBitsSet(mask));
}
exports.xKeyPathAllSet = xKeyPathAllSet;
//! Declares com.lightningkite.lightningdb.anyClear>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.anyClear.K, kotlin.Int
function xKeyPathAnyClear(this_, mask) {
    return this_.mapCondition(new Condition_1.Condition.IntBitsAnyClear(mask));
}
exports.xKeyPathAnyClear = xKeyPathAnyClear;
//! Declares com.lightningkite.lightningdb.anySet>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.anySet.K, kotlin.Int
function xKeyPathAnySet(this_, mask) {
    return this_.mapCondition(new Condition_1.Condition.IntBitsAnySet(mask));
}
exports.xKeyPathAnySet = xKeyPathAnySet;
//! Declares com.lightningkite.lightningdb.contains>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.contains.K, kotlin.String
function xKeyPathContains(this_, value) {
    return this_.mapCondition(new Condition_1.Condition.StringContains(value, true));
}
exports.xKeyPathContains = xKeyPathContains;
//! Declares com.lightningkite.lightningdb.contains>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.contains.K, kotlin.String
function xKeyPathContainsCased(this_, value, ignoreCase) {
    return this_.mapCondition(new Condition_1.Condition.StringContains(value, ignoreCase));
}
exports.xKeyPathContainsCased = xKeyPathContainsCased;
//! Declares com.lightningkite.lightningdb.fullTextSearch>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.fullTextSearch.K, com.lightningkite.lightningdb.fullTextSearch.V
function xKeyPathFullTextSearch(this_, value, ignoreCase) {
    return this_.mapCondition(new Condition_1.Condition.FullTextSearch(value, ignoreCase));
}
exports.xKeyPathFullTextSearch = xKeyPathFullTextSearch;
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Listcom.lightningkite.lightningdb.all.T
function xKeyPathListAll(this_, condition) {
    return this_.mapCondition(new Condition_1.Condition.ListAllElements((condition)(startChain())));
}
exports.xKeyPathListAll = xKeyPathListAll;
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Listcom.lightningkite.lightningdb.any.T
function xKeyPathListAny(this_, condition) {
    return this_.mapCondition(new Condition_1.Condition.ListAnyElements((condition)(startChain())));
}
exports.xKeyPathListAny = xKeyPathListAny;
//! Declares com.lightningkite.lightningdb.sizesEquals>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.sizesEquals.K, kotlin.collections.Listcom.lightningkite.lightningdb.sizesEquals.T
function xKeyPathListSizedEqual(this_, count) {
    return this_.mapCondition(new Condition_1.Condition.ListSizesEquals(count));
}
exports.xKeyPathListSizedEqual = xKeyPathListSizedEqual;
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Setcom.lightningkite.lightningdb.all.T
function xKeyPathSetAll(this_, condition) {
    return this_.mapCondition(new Condition_1.Condition.SetAllElements((condition)(startChain())));
}
exports.xKeyPathSetAll = xKeyPathSetAll;
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Setcom.lightningkite.lightningdb.any.T
function xKeyPathSetAny(this_, condition) {
    return this_.mapCondition(new Condition_1.Condition.SetAnyElements((condition)(startChain())));
}
exports.xKeyPathSetAny = xKeyPathSetAny;
//! Declares com.lightningkite.lightningdb.sizesEquals>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.sizesEquals.K, kotlin.collections.Setcom.lightningkite.lightningdb.sizesEquals.T
function xKeyPathSetSizedEqual(this_, count) {
    return this_.mapCondition(new Condition_1.Condition.SetSizesEquals(count));
}
exports.xKeyPathSetSizedEqual = xKeyPathSetSizedEqual;
//! Declares com.lightningkite.lightningdb.containsKey>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.containsKey.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.containsKey.T
function xKeyPathContainsKey(this_, key) {
    return this_.mapCondition(new Condition_1.Condition.Exists(key));
}
exports.xKeyPathContainsKey = xKeyPathContainsKey;
//! Declares com.lightningkite.lightningdb.notNull>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.notNull.K, com.lightningkite.lightningdb.notNull.T
function xKeyPathNotNullGet(this_) { return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.IfNotNull(it))), (it) => (this_.mapModification(new Modification_1.Modification.IfNotNull(it))), (it) => (this_.getProp(it)), (it, value) => (this_.setProp(it, value))); }
exports.xKeyPathNotNullGet = xKeyPathNotNullGet;
//! Declares com.lightningkite.lightningdb.get>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.get.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.get.T
function xKeyPathGet(this_, key) {
    return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.OnKey(key, it))), (it) => (this_.mapModification(new Modification_1.Modification.ModifyByKey(new Map([[key, it]])))), (it) => { var _a; return (((_a = this_.getProp(it).get(key)) !== null && _a !== void 0 ? _a : null)); }, (from, to) => (this_.setProp(from, new Map([...this_.getProp(from), [key, to]]))));
}
exports.xKeyPathGet = xKeyPathGet;
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Listcom.lightningkite.lightningdb.all.T
function xKeyPathListAllGet(this_) { return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.ListAllElements(it))), (it) => (this_.mapModification(new Modification_1.Modification.ListPerElement(new Condition_1.Condition.Always(), it))), (it) => ((0, iter_tools_es_1.first)(this_.getProp(it))), (from, to) => (this_.setProp(from, this_.getProp(from).concat([to])))); }
exports.xKeyPathListAllGet = xKeyPathListAllGet;
//! Declares com.lightningkite.lightningdb.all>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.all.K, kotlin.collections.Setcom.lightningkite.lightningdb.all.T
function xKeyPathSetAllGet(this_) { return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.SetAllElements(it))), (it) => (this_.mapModification(new Modification_1.Modification.SetPerElement(new Condition_1.Condition.Always(), it))), (it) => ((0, iter_tools_es_1.first)(this_.getProp(it))), (from, to) => (this_.setProp(from, new khrysalis_runtime_1.EqualOverrideSet([...this_.getProp(from), to])))); }
exports.xKeyPathSetAllGet = xKeyPathSetAllGet;
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Listcom.lightningkite.lightningdb.any.T
function xKeyPathListAnyGet(this_) { return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.ListAnyElements(it))), (it) => (this_.mapModification(new Modification_1.Modification.ListPerElement(new Condition_1.Condition.Always(), it))), (it) => ((0, iter_tools_es_1.first)(this_.getProp(it))), (from, to) => (this_.setProp(from, this_.getProp(from).concat([to])))); }
exports.xKeyPathListAnyGet = xKeyPathListAnyGet;
//! Declares com.lightningkite.lightningdb.any>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.any.K, kotlin.collections.Setcom.lightningkite.lightningdb.any.T
function xKeyPathSetAnyGet(this_) { return new KeyPath((it) => (this_.mapCondition(new Condition_1.Condition.SetAnyElements(it))), (it) => (this_.mapModification(new Modification_1.Modification.SetPerElement(new Condition_1.Condition.Always(), it))), (it) => ((0, iter_tools_es_1.first)(this_.getProp(it))), (from, to) => (this_.setProp(from, new khrysalis_runtime_1.EqualOverrideSet([...this_.getProp(from), to])))); }
exports.xKeyPathSetAnyGet = xKeyPathSetAnyGet;
//! Declares com.lightningkite.lightningdb.condition>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.condition.K, com.lightningkite.lightningdb.condition.T
function xKeyPathCondition(this_, make) {
    return this_.mapCondition(make(startChain()));
}
exports.xKeyPathCondition = xKeyPathCondition;
//! Declares com.lightningkite.lightningdb.modification>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.modification.K, com.lightningkite.lightningdb.modification.T
function xKeyPathModification(this_, make) {
    return this_.mapModification(make(startChain()));
}
exports.xKeyPathModification = xKeyPathModification;
//! Declares com.lightningkite.lightningdb.assign>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.assign.K, com.lightningkite.lightningdb.assign.T
function xKeyPathAssign(this_, value) {
    return this_.mapModification(new Modification_1.Modification.Assign(value));
}
exports.xKeyPathAssign = xKeyPathAssign;
//! Declares com.lightningkite.lightningdb.coerceAtMost>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.coerceAtMost.K, com.lightningkite.lightningdb.coerceAtMost.T
function xKeyPathCoerceAtMost(this_, value) {
    return this_.mapModification(new Modification_1.Modification.CoerceAtMost(value));
}
exports.xKeyPathCoerceAtMost = xKeyPathCoerceAtMost;
//! Declares com.lightningkite.lightningdb.coerceAtLeast>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.coerceAtLeast.K, com.lightningkite.lightningdb.coerceAtLeast.T
function xKeyPathCoerceAtLeast(this_, value) {
    return this_.mapModification(new Modification_1.Modification.CoerceAtLeast(value));
}
exports.xKeyPathCoerceAtLeast = xKeyPathCoerceAtLeast;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, com.lightningkite.lightningdb.plus.T
function xKeyPathPlusNumber(this_, by) {
    return this_.mapModification(new Modification_1.Modification.Increment(by));
}
exports.xKeyPathPlusNumber = xKeyPathPlusNumber;
//! Declares com.lightningkite.lightningdb.times>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.times.K, com.lightningkite.lightningdb.times.T
function xKeyPathTimes(this_, by) {
    return this_.mapModification(new Modification_1.Modification.Multiply(by));
}
exports.xKeyPathTimes = xKeyPathTimes;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.String
function xKeyPathPlusString(this_, value) {
    return this_.mapModification(new Modification_1.Modification.AppendString(value));
}
exports.xKeyPathPlusString = xKeyPathPlusString;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.collections.Listcom.lightningkite.lightningdb.plus.T
function xKeyPathPlusItemsList(this_, items) {
    return this_.mapModification(new Modification_1.Modification.ListAppend(items));
}
exports.xKeyPathPlusItemsList = xKeyPathPlusItemsList;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.collections.Setcom.lightningkite.lightningdb.plus.T
function xKeyPathPlusItemsSet(this_, items) {
    return this_.mapModification(new Modification_1.Modification.SetAppend(items));
}
exports.xKeyPathPlusItemsSet = xKeyPathPlusItemsSet;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.collections.Listcom.lightningkite.lightningdb.plus.T
function xKeyPathPlusItemList(this_, item) {
    return this_.mapModification(new Modification_1.Modification.ListAppend([item]));
}
exports.xKeyPathPlusItemList = xKeyPathPlusItemList;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.collections.Setcom.lightningkite.lightningdb.plus.T
function xKeyPathPlusItemSet(this_, item) {
    return this_.mapModification(new Modification_1.Modification.SetAppend(new khrysalis_runtime_1.EqualOverrideSet([item])));
}
exports.xKeyPathPlusItemSet = xKeyPathPlusItemSet;
//! Declares com.lightningkite.lightningdb.addAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.addAll.K, kotlin.collections.Listcom.lightningkite.lightningdb.addAll.T
function xKeyPathListAddAll(this_, items) {
    return this_.mapModification(new Modification_1.Modification.ListAppend(items));
}
exports.xKeyPathListAddAll = xKeyPathListAddAll;
//! Declares com.lightningkite.lightningdb.addAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.addAll.K, kotlin.collections.Setcom.lightningkite.lightningdb.addAll.T
function xKeyPathSetAddAll(this_, items) {
    return this_.mapModification(new Modification_1.Modification.SetAppend(items));
}
exports.xKeyPathSetAddAll = xKeyPathSetAddAll;
//! Declares com.lightningkite.lightningdb.removeAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.removeAll.K, kotlin.collections.Listcom.lightningkite.lightningdb.removeAll.T
function xKeyPathListRemove(this_, condition) {
    return this_.mapModification(new Modification_1.Modification.ListRemove((condition)(startChain())));
}
exports.xKeyPathListRemove = xKeyPathListRemove;
//! Declares com.lightningkite.lightningdb.removeAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.removeAll.K, kotlin.collections.Setcom.lightningkite.lightningdb.removeAll.T
function xKeyPathSetRemove(this_, condition) {
    return this_.mapModification(new Modification_1.Modification.SetRemove((condition)(startChain())));
}
exports.xKeyPathSetRemove = xKeyPathSetRemove;
//! Declares com.lightningkite.lightningdb.removeAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.removeAll.K, kotlin.collections.Listcom.lightningkite.lightningdb.removeAll.T
function xKeyPathListRemoveAll(this_, items) {
    return this_.mapModification(new Modification_1.Modification.ListRemoveInstances(items));
}
exports.xKeyPathListRemoveAll = xKeyPathListRemoveAll;
//! Declares com.lightningkite.lightningdb.removeAll>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.removeAll.K, kotlin.collections.Setcom.lightningkite.lightningdb.removeAll.T
function xKeyPathSetRemoveAll(this_, items) {
    return this_.mapModification(new Modification_1.Modification.SetRemoveInstances(items));
}
exports.xKeyPathSetRemoveAll = xKeyPathSetRemoveAll;
//! Declares com.lightningkite.lightningdb.dropLast>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.dropLast.K, kotlin.collections.Listcom.lightningkite.lightningdb.dropLast.T
function xKeyPathListDropLast(this_) {
    return this_.mapModification(new Modification_1.Modification.ListDropLast());
}
exports.xKeyPathListDropLast = xKeyPathListDropLast;
//! Declares com.lightningkite.lightningdb.dropLast>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.dropLast.K, kotlin.collections.Setcom.lightningkite.lightningdb.dropLast.T
function xKeyPathSetDropLast(this_) {
    return this_.mapModification(new Modification_1.Modification.SetDropLast());
}
exports.xKeyPathSetDropLast = xKeyPathSetDropLast;
//! Declares com.lightningkite.lightningdb.dropFirst>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.dropFirst.K, kotlin.collections.Listcom.lightningkite.lightningdb.dropFirst.T
function xKeyPathListDropFirst(this_) {
    return this_.mapModification(new Modification_1.Modification.ListDropFirst());
}
exports.xKeyPathListDropFirst = xKeyPathListDropFirst;
//! Declares com.lightningkite.lightningdb.dropFirst>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.dropFirst.K, kotlin.collections.Setcom.lightningkite.lightningdb.dropFirst.T
function xKeyPathSetDropFirst(this_) {
    return this_.mapModification(new Modification_1.Modification.SetDropFirst());
}
exports.xKeyPathSetDropFirst = xKeyPathSetDropFirst;
//! Declares com.lightningkite.lightningdb.map>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.map.K, kotlin.collections.Listcom.lightningkite.lightningdb.map.T
function xKeyPathListMap(this_, modification) {
    return this_.mapModification(new Modification_1.Modification.ListPerElement(new Condition_1.Condition.Always(), (modification)(startChain())));
}
exports.xKeyPathListMap = xKeyPathListMap;
//! Declares com.lightningkite.lightningdb.map>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.map.K, kotlin.collections.Setcom.lightningkite.lightningdb.map.T
function xKeyPathSetMap(this_, modification) {
    return this_.mapModification(new Modification_1.Modification.SetPerElement(new Condition_1.Condition.Always(), (modification)(startChain())));
}
exports.xKeyPathSetMap = xKeyPathSetMap;
//! Declares com.lightningkite.lightningdb.mapIf>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.mapIf.K, kotlin.collections.Listcom.lightningkite.lightningdb.mapIf.T
function xKeyPathListMapIf(this_, condition, modification) {
    return this_.mapModification(new Modification_1.Modification.ListPerElement((condition)(startChain()), (modification)(startChain())));
}
exports.xKeyPathListMapIf = xKeyPathListMapIf;
//! Declares com.lightningkite.lightningdb.mapIf>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.mapIf.K, kotlin.collections.Setcom.lightningkite.lightningdb.mapIf.T
function xKeyPathSetMapIf(this_, condition, modification) {
    return this_.mapModification(new Modification_1.Modification.SetPerElement((condition)(startChain()), (modification)(startChain())));
}
exports.xKeyPathSetMapIf = xKeyPathSetMapIf;
//! Declares com.lightningkite.lightningdb.plus>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.plus.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.plus.T
function xKeyPathPlusMap(this_, map) {
    return this_.mapModification(new Modification_1.Modification.Combine(map));
}
exports.xKeyPathPlusMap = xKeyPathPlusMap;
//! Declares com.lightningkite.lightningdb.modifyByKey>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.modifyByKey.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.modifyByKey.T
function xKeyPathModifyByKey(this_, map) {
    return this_.mapModification(new Modification_1.Modification.ModifyByKey(new Map((0, iter_tools_es_1.map)(x => [x[0], ((it) => ((it[1])(startChain())))(x)], map.entries()))));
}
exports.xKeyPathModifyByKey = xKeyPathModifyByKey;
//! Declares com.lightningkite.lightningdb.removeKeys>com.lightningkite.lightningdb.KeyPathcom.lightningkite.lightningdb.removeKeys.K, kotlin.collections.Mapkotlin.String, com.lightningkite.lightningdb.removeKeys.T
function xKeyPathRemoveKeys(this_, fields) {
    return this_.mapModification(new Modification_1.Modification.RemoveKeys(fields));
}
exports.xKeyPathRemoveKeys = xKeyPathRemoveKeys;
//# sourceMappingURL=dsl.js.map

exports.xUnitThen = xUnitThen;
//# sourceMappingURL=dsl.js.map