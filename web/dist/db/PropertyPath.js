"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.condition = exports.path = exports.xPropertyPathSafeGet = exports.xPropertyPathGet = exports.PropertyPathSafeAccess = exports.PropertyPathAccess = exports.PropertyPathSelf = exports.PropertyPath = exports.PropertyPathPartial = void 0;
// Package: com.lightningkite.lightningdb
// Generated by Khrysalis, but customized
const Condition_1 = require("./Condition");
const Modification_1 = require("./Modification");
const TProperty1Extensions_1 = require("./TProperty1Extensions");
const khrysalis_runtime_1 = require("@lightningkite/khrysalis-runtime");
//! Declares com.lightningkite.lightningdb.PropertyPathPartial
class PropertyPathPartial {
    constructor() {
    }
}
exports.PropertyPathPartial = PropertyPathPartial;
//! Declares com.lightningkite.lightningdb.PropertyPath
class PropertyPath extends PropertyPathPartial {
    constructor() {
        super();
    }
    getAny(key) {
        return this.get(key);
    }
    setAny(key, any) {
        return this.set(key, any);
    }
}
exports.PropertyPath = PropertyPath;
//! Declares com.lightningkite.lightningdb.PropertyPathSelf
class PropertyPathSelf extends PropertyPath {
    constructor() {
        super();
    }
    get(key) {
        return key;
    }
    set(key, value) {
        return value;
    }
    toString() {
        return "this";
    }
    hashCode() {
        return 0;
    }
    equals(other) {
        return other instanceof PropertyPathSelf;
    }
    //! Declares com.lightningkite.lightningdb.PropertyPathSelf.properties
    get properties() { return []; }
    mapCondition(condition) {
        return condition;
    }
    mapModification(modification) {
        return modification;
    }
}
exports.PropertyPathSelf = PropertyPathSelf;
//! Declares com.lightningkite.lightningdb.PropertyPathAccess
class PropertyPathAccess extends PropertyPath {
    constructor(first, second) {
        super();
        this.first = first;
        this.second = second;
    }
    static propertyTypes(K, M, V) { return { first: [PropertyPath, K, M], second: [String, M, V] }; }
    get(key) {
        return ((it) => ((0, khrysalis_runtime_1.reflectiveGet)(it, this.second)))(this.first.get(key));
    }
    set(key, value) {
        return this.first.set(key, (0, TProperty1Extensions_1.keySet)(this.first.get(key), this.second, value));
    }
    toString() {
        return this.first instanceof PropertyPathSelf ? this.second : `${this.first}.${this.second}`;
    }
    //! Declares com.lightningkite.lightningdb.PropertyPathAccess.properties
    get properties() { return this.first.properties.concat([this.second]); }
    mapCondition(condition) {
        return this.first.mapCondition(new Condition_1.Condition.OnField(this.second, condition));
    }
    mapModification(modification) {
        return this.first.mapModification(new Modification_1.Modification.OnField(this.second, modification));
    }
}
exports.PropertyPathAccess = PropertyPathAccess;
PropertyPathAccess.properties = ["first", "second"];
(0, khrysalis_runtime_1.setUpDataClass)(PropertyPathAccess);
//! Declares com.lightningkite.lightningdb.PropertyPathSafeAccess
class PropertyPathSafeAccess extends PropertyPath {
    constructor(first, second) {
        super();
        this.first = first;
        this.second = second;
    }
    static propertyTypes(K, M, V) { return { first: [PropertyPath, K, M], second: [String, M, V] }; }
    get(key) {
        return (() => {
            const temp9 = this.first.get(key);
            if (temp9 === null || temp9 === undefined) {
                return null;
            }
            return ((it) => ((0, khrysalis_runtime_1.reflectiveGet)(it, this.second)))(temp9);
        })();
    }
    set(key, value) {
        var _a;
        return (_a = (() => {
            const temp12 = this.first.get(key);
            if (temp12 === null || temp12 === undefined) {
                return null;
            }
            return ((it) => (this.first.set(key, (0, TProperty1Extensions_1.keySet)(it, this.second, value))))(temp12);
        })()) !== null && _a !== void 0 ? _a : key;
    }
    toString() {
        return `${this.first}?.${this.second}`;
    }
    //! Declares com.lightningkite.lightningdb.PropertyPathSafeAccess.properties
    get properties() { return this.first.properties.concat([this.second]); }
    mapCondition(condition) {
        // @ts-ignore
        return this.first.mapCondition(new Condition_1.Condition.IfNotNull(new Condition_1.Condition.OnField(this.second, condition)));
    }
    mapModification(modification) {
        // @ts-ignore
        return this.first.mapModification(new Modification_1.Modification.IfNotNull(new Modification_1.Modification.OnField(this.second, modification)));
    }
}
exports.PropertyPathSafeAccess = PropertyPathSafeAccess;
PropertyPathSafeAccess.properties = ["first", "second"];
(0, khrysalis_runtime_1.setUpDataClass)(PropertyPathSafeAccess);
//data class PropertyPathKeyAccess<K, V>(val first: PropertyPath<K, Map<String, V>>, val index: String): PropertyPath<K, V?>() {
//    override fun get(key: K): V? = first.get(key).get(index)
//    override fun set(key: K, value: V?): K = first.get(key).let {
//        first.set(key, it.toMutableMap().also {
//            if(value == null) it.remove(index)
//            else it[index] = value
//        })
//    }
//    override fun toString(): String = "$first.$index"
//    override val properties: List<KProperty1<*, *>> get() = first.properties
//}
//data class PropertyPathSafeKeyAccess<K, V>(val first: PropertyPath<K, Map<String, V>?>, val index: String): PropertyPath<K, V?>() {
//    override fun get(key: K): V? = first.get(key)?.get(index)
//    override fun set(key: K, value: V?): K = first.get(key).let {
//        first.set(key, it?.toMutableMap()?.also {
//            if(value == null) it.remove(index)
//            else it[index] = value
//        })
//    }
//    override fun toString(): String = "$first.$index"
//    override val properties: List<KProperty1<*, *>> get() = first.properties
//}
//! Declares com.lightningkite.lightningdb.get>com.lightningkite.lightningdb.PropertyPathcom.lightningkite.lightningdb.get.K, com.lightningkite.lightningdb.get.V
function xPropertyPathGet(this_, prop) {
    return new PropertyPathAccess(this_, prop);
}
exports.xPropertyPathGet = xPropertyPathGet;
//! Declares com.lightningkite.lightningdb.safeGet>com.lightningkite.lightningdb.PropertyPathcom.lightningkite.lightningdb.safeGet.K, com.lightningkite.lightningdb.safeGet.V
function xPropertyPathSafeGet(this_, prop) {
    return new PropertyPathSafeAccess(this_, prop);
}
exports.xPropertyPathSafeGet = xPropertyPathSafeGet;
//! Declares com.lightningkite.lightningdb.path
function path() {
    return new PropertyPathSelf();
}
exports.path = path;
//operator fun <K, V : IsCodableAndHashable> PropertyPath<K, Map<String, V>>.get(key: String) = PropertyPathKeyAccess(this, key)
//operator fun <K, V : IsCodableAndHashable> PropertyPath<K, Map<String, V>?>.get(key: String) = PropertyPathSafeKeyAccess(this, key)
//! Declares com.lightningkite.lightningdb.condition
function condition(setup) {
    return (setup)(path());
}
exports.condition = condition;
//# sourceMappingURL=PropertyPath.js.map