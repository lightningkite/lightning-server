import { Condition } from './Condition';
import { DataClassPath } from './DataClassPath';
export declare function path<T extends any>(): DataClassPath<T, T>;
export declare function condition<T extends any>(setup: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<T>;
export declare function xDataClassPathAlwaysGet<K extends any>(this_: DataClassPath<K, K>): Condition<K>;
export declare function xDataClassPathNeverGet<K extends any>(this_: DataClassPath<K, K>): Condition<K>;
export declare function xDataClassPathEq<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathNeq<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathNe<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathInsideSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K>;
export declare function xDataClassPathInside<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K>;
export declare function xDataClassPathNinSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K>;
export declare function xDataClassPathNin<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K>;
export declare function xDataClassPathNotInSet<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Set<T>): Condition<K>;
export declare function xDataClassPathNotIn<K extends any, T extends any>(this_: DataClassPath<K, T>, values: Array<T>): Condition<K>;
export declare function xDataClassPathGt<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathLt<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathGte<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathLte<K extends any, T extends any>(this_: DataClassPath<K, T>, value: T): Condition<K>;
export declare function xDataClassPathAllClear<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K>;
export declare function xDataClassPathAllSet<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K>;
export declare function xDataClassPathAnyClear<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K>;
export declare function xDataClassPathAnySet<K extends any>(this_: DataClassPath<K, number>, mask: number): Condition<K>;
export declare function xDataClassPathContains<K extends any>(this_: DataClassPath<K, string>, value: string): Condition<K>;
export declare function xDataClassPathContainsCased<K extends any>(this_: DataClassPath<K, string>, value: string, ignoreCase: boolean): Condition<K>;
export declare function xDataClassPathFullTextSearch<K extends any, V extends any>(this_: DataClassPath<K, V>, value: string, ignoreCase: boolean): Condition<K>;
export declare function xDataClassPathListAll<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K>;
export declare function xDataClassPathListAny<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K>;
export declare function xDataClassPathListSizedEqual<K extends any, T extends any>(this_: DataClassPath<K, Array<T>>, count: number): Condition<K>;
export declare function xDataClassPathSetAll<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K>;
export declare function xDataClassPathSetAny<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, condition: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K>;
export declare function xDataClassPathSetSizedEqual<K extends any, T extends any>(this_: DataClassPath<K, Set<T>>, count: number): Condition<K>;
export declare function xDataClassPathContainsKey<K extends any, T extends any>(this_: DataClassPath<K, Map<string, T>>, key: string): Condition<K>;
export declare function xDataClassPathCondition<K extends any, T extends any>(this_: DataClassPath<K, T>, make: ((a: DataClassPath<T, T>) => Condition<T>)): Condition<K>;
