//package com.lightningkite.lightningserver.auth
//
//import com.lightningkite.lightningdb.HasId
//
//
//data class AuthOp0<R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>) -> R)
//inline fun <reified U: HasId<*>, R> authOp(crossinline action: suspend (RequestAuth<U>) -> R) = AuthOp0<R>(authOptions<U>()) { action(it as RequestAuth<U>) }
//inline fun <reified U: HasId<*>, R> authOp(crossinline action: suspend (RequestAuth<U>?) -> R) = AuthOp0<R>(authOptions<U>() + setOf(null)) { action(it as RequestAuth<U>?) }
//inline fun <reified U: HasId<*>, R> authOp(crossinline action: suspend (U) -> R) = AuthOp0<R>(authOptions<U>()) { action(it as U) }
//data class AuthOp1<T1, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1) -> R)
//inline fun <reified U: HasId<*>, T1, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1) -> R) = AuthOp1<T1, R>(authOptions<U>()) { auth, t1 -> action(auth as RequestAuth<U>, t1) }
//inline fun <reified U: HasId<*>, T1, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1) -> R) = AuthOp1<T1, R>(authOptions<U>() + setOf(null)) { auth, t1 -> action(auth as RequestAuth<U>?, t1) }
//inline fun <reified U: HasId<*>, T1, R> authOp(crossinline action: suspend (U, t1: T1) -> R) = AuthOp1<T1, R>(authOptions<U>()) { auth, t1 -> action(auth as U, t1) }
//data class AuthOp2<T1, T2, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2) -> R)
//inline fun <reified U: HasId<*>, T1, T2, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2) -> R) = AuthOp2<T1, T2, R>(authOptions<U>()) { auth, t1, t2 -> action(auth as RequestAuth<U>, t1, t2) }
//inline fun <reified U: HasId<*>, T1, T2, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2) -> R) = AuthOp2<T1, T2, R>(authOptions<U>() + setOf(null)) { auth, t1, t2 -> action(auth as RequestAuth<U>?, t1, t2) }
//inline fun <reified U: HasId<*>, T1, T2, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2) -> R) = AuthOp2<T1, T2, R>(authOptions<U>()) { auth, t1, t2 -> action(auth as U, t1, t2) }
//data class AuthOp3<T1, T2, T3, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3) -> R) = AuthOp3<T1, T2, T3, R>(authOptions<U>()) { auth, t1, t2, t3 -> action(auth as RequestAuth<U>, t1, t2, t3) }
//inline fun <reified U: HasId<*>, T1, T2, T3, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3) -> R) = AuthOp3<T1, T2, T3, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3 -> action(auth as RequestAuth<U>?, t1, t2, t3) }
//inline fun <reified U: HasId<*>, T1, T2, T3, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3) -> R) = AuthOp3<T1, T2, T3, R>(authOptions<U>()) { auth, t1, t2, t3 -> action(auth as U, t1, t2, t3) }
//data class AuthOp4<T1, T2, T3, T4, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4) -> R) = AuthOp4<T1, T2, T3, T4, R>(authOptions<U>()) { auth, t1, t2, t3, t4 -> action(auth as RequestAuth<U>, t1, t2, t3, t4) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4) -> R) = AuthOp4<T1, T2, T3, T4, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4) -> R) = AuthOp4<T1, T2, T3, T4, R>(authOptions<U>()) { auth, t1, t2, t3, t4 -> action(auth as U, t1, t2, t3, t4) }
//data class AuthOp5<T1, T2, T3, T4, T5, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) -> R) = AuthOp5<T1, T2, T3, T4, T5, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) -> R) = AuthOp5<T1, T2, T3, T4, T5, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) -> R) = AuthOp5<T1, T2, T3, T4, T5, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5 -> action(auth as U, t1, t2, t3, t4, t5) }
//data class AuthOp6<T1, T2, T3, T4, T5, T6, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) -> R) = AuthOp6<T1, T2, T3, T4, T5, T6, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5, t6) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) -> R) = AuthOp6<T1, T2, T3, T4, T5, T6, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5, t6 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5, t6) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) -> R) = AuthOp6<T1, T2, T3, T4, T5, T6, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6 -> action(auth as U, t1, t2, t3, t4, t5, t6) }
//data class AuthOp7<T1, T2, T3, T4, T5, T6, T7, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) -> R) = AuthOp7<T1, T2, T3, T4, T5, T6, T7, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5, t6, t7) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) -> R) = AuthOp7<T1, T2, T3, T4, T5, T6, T7, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5, t6, t7 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5, t6, t7) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7) -> R) = AuthOp7<T1, T2, T3, T4, T5, T6, T7, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7 -> action(auth as U, t1, t2, t3, t4, t5, t6, t7) }
//data class AuthOp8<T1, T2, T3, T4, T5, T6, T7, T8, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8) -> R) = AuthOp8<T1, T2, T3, T4, T5, T6, T7, T8, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5, t6, t7, t8) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8) -> R) = AuthOp8<T1, T2, T3, T4, T5, T6, T7, T8, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5, t6, t7, t8 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5, t6, t7, t8) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8) -> R) = AuthOp8<T1, T2, T3, T4, T5, T6, T7, T8, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8 -> action(auth as U, t1, t2, t3, t4, t5, t6, t7, t8) }
//data class AuthOp9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9) -> R) = AuthOp9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5, t6, t7, t8, t9) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9) -> R) = AuthOp9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5, t6, t7, t8, t9) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9) -> R) = AuthOp9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9 -> action(auth as U, t1, t2, t3, t4, t5, t6, t7, t8, t9) }
//data class AuthOp10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(val options: AuthOptions, val x: suspend (auth: RequestAuth<*>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10) -> R)
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> authOp(crossinline action: suspend (RequestAuth<U>, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10) -> R) = AuthOp10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 -> action(auth as RequestAuth<U>, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> authOp(crossinline action: suspend (RequestAuth<U>?, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10) -> R) = AuthOp10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(authOptions<U>() + setOf(null)) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 -> action(auth as RequestAuth<U>?, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) }
//inline fun <reified U: HasId<*>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> authOp(crossinline action: suspend (U, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10) -> R) = AuthOp10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(authOptions<U>()) { auth, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 -> action(auth as U, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) }