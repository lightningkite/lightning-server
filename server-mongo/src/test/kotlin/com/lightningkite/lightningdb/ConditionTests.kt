package com.lightningkite.lightningdb

import com.lightningkite.lightningdb.application.*
import kotlinx.coroutines.flow.toList
import kotlinx.coroutines.runBlocking
import org.junit.Test
import org.litote.kmongo.json
import java.time.Instant
import kotlin.test.assertContains
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class ConditionTests : MongoTest() {

    // region autogenerated conditions
    @Test fun test_Boolean_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_eq")
        val lower = LargeTestModel(boolean = false)
        val higher = LargeTestModel(boolean = true)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().boolean eq true
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Boolean_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_ne")
        val lower = LargeTestModel(boolean = false)
        val higher = LargeTestModel(boolean = true)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().boolean ne true
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Boolean_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_nullable_eq")
        val lower = LargeTestModel(booleanNullable = null)
        val higher = LargeTestModel(booleanNullable = true)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().booleanNullable.notNull eq true
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Boolean_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_nullable_eq2")
        val lower = LargeTestModel(booleanNullable = null)
        val higher = LargeTestModel(booleanNullable = true)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().booleanNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_List_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_eq")
        val lower = LargeTestModel(list = listOf(1, 2, 3))
        val higher = LargeTestModel(list = listOf(7, 8, 9))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().list eq listOf(7, 8, 9)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_List_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_ne")
        val lower = LargeTestModel(list = listOf(1, 2, 3))
        val higher = LargeTestModel(list = listOf(7, 8, 9))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().list ne listOf(7, 8, 9)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_List_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_nullable_eq")
        val lower = LargeTestModel(listNullable = null)
        val higher = LargeTestModel(listNullable = listOf(7, 8, 9))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().listNullable.notNull eq listOf(7, 8, 9)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_List_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_nullable_eq2")
        val lower = LargeTestModel(listNullable = null)
        val higher = LargeTestModel(listNullable = listOf(7, 8, 9))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().listNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Map_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_eq")
        val lower = LargeTestModel(map = mapOf("a" to 1))
        val higher = LargeTestModel(map = mapOf("c" to 3))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().map eq mapOf("c" to 3)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Map_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_ne")
        val lower = LargeTestModel(map = mapOf("a" to 1))
        val higher = LargeTestModel(map = mapOf("c" to 3))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().map ne mapOf("c" to 3)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Map_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_nullable_eq")
        val lower = LargeTestModel(mapNullable = null)
        val higher = LargeTestModel(mapNullable = mapOf("c" to 3))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().mapNullable.notNull eq mapOf("c" to 3)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Map_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_nullable_eq2")
        val lower = LargeTestModel(mapNullable = null)
        val higher = LargeTestModel(mapNullable = mapOf("c" to 3))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().mapNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Byte_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_eq")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byte eq 3.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_ne")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byte ne 3.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_nullable_eq")
        val lower = LargeTestModel(byteNullable = null)
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byteNullable.notNull eq 3.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_nullable_eq2")
        val lower = LargeTestModel(byteNullable = null)
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byteNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Short_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_eq")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().short eq 3.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_ne")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().short ne 3.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_nullable_eq")
        val lower = LargeTestModel(shortNullable = null)
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().shortNullable.notNull eq 3.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_nullable_eq2")
        val lower = LargeTestModel(shortNullable = null)
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().shortNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Int_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_eq")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().int eq 3
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_ne")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().int ne 3
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_nullable_eq")
        val lower = LargeTestModel(intNullable = null)
        val higher = LargeTestModel(intNullable = 3)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().intNullable.notNull eq 3
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_nullable_eq2")
        val lower = LargeTestModel(intNullable = null)
        val higher = LargeTestModel(intNullable = 3)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().intNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Long_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_eq")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().long eq 3L
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_ne")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().long ne 3L
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_nullable_eq")
        val lower = LargeTestModel(longNullable = null)
        val higher = LargeTestModel(longNullable = 3L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().longNullable.notNull eq 3L
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_nullable_eq2")
        val lower = LargeTestModel(longNullable = null)
        val higher = LargeTestModel(longNullable = 3L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().longNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Float_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_eq")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().float eq 3f
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_ne")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().float ne 3f
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_nullable_eq")
        val lower = LargeTestModel(floatNullable = null)
        val higher = LargeTestModel(floatNullable = 3f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().floatNullable.notNull eq 3f
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_nullable_eq2")
        val lower = LargeTestModel(floatNullable = null)
        val higher = LargeTestModel(floatNullable = 3f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().floatNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Double_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_eq")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().double eq 3.0
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_ne")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().double ne 3.0
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_nullable_eq")
        val lower = LargeTestModel(doubleNullable = null)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull eq 3.0
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_nullable_eq2")
        val lower = LargeTestModel(doubleNullable = null)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().doubleNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_String_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_eq")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().string eq "aca"
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_ne")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().string ne "aca"
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_nullable_eq")
        val lower = LargeTestModel(stringNullable = null)
        val higher = LargeTestModel(stringNullable = "aca")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().stringNullable.notNull eq "aca"
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_nullable_eq2")
        val lower = LargeTestModel(stringNullable = null)
        val higher = LargeTestModel(stringNullable = "aca")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().stringNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Instant_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_eq")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instant eq Instant.ofEpochMilli(15000L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_ne() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_ne")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instant ne Instant.ofEpochMilli(15000L)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_nullable_eq() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_nullable_eq")
        val lower = LargeTestModel(instantNullable = null)
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instantNullable.notNull eq Instant.ofEpochMilli(15000L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_nullable_eq2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_nullable_eq2")
        val lower = LargeTestModel(instantNullable = null)
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instantNullable eq null
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Boolean_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_inside")
        val higher = LargeTestModel(boolean = true)
        val lower = LargeTestModel(boolean = false)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().boolean inside listOf<Boolean>(true)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Boolean_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_inside_nullable")
        val higher = LargeTestModel(booleanNullable = true)
        val isNull = LargeTestModel(booleanNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().booleanNullable.notNull inside listOf<Boolean>(true)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Boolean_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_notIn")
        val lower = LargeTestModel(boolean = false)
        val higher = LargeTestModel(boolean = true)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().boolean notIn listOf<Boolean>(true)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Byte_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_inside")
        val higher = LargeTestModel(byte = 3.toByte())
        val lower = LargeTestModel(byte = 1.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byte inside listOf<Byte>(3.toByte())
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_inside_nullable")
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val isNull = LargeTestModel(byteNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byteNullable.notNull inside listOf<Byte>(3.toByte())
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_notIn")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().byte notIn listOf<Byte>(3.toByte())
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Short_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_inside")
        val higher = LargeTestModel(short = 3.toShort())
        val lower = LargeTestModel(short = 1.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().short inside listOf<Short>(3.toShort())
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_inside_nullable")
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val isNull = LargeTestModel(shortNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().shortNullable.notNull inside listOf<Short>(3.toShort())
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_notIn")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().short notIn listOf<Short>(3.toShort())
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Int_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_inside")
        val higher = LargeTestModel(int = 3)
        val lower = LargeTestModel(int = 1)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().int inside listOf<Int>(3)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_inside_nullable")
        val higher = LargeTestModel(intNullable = 3)
        val isNull = LargeTestModel(intNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().intNullable.notNull inside listOf<Int>(3)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_notIn")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().int notIn listOf<Int>(3)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Long_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_inside")
        val higher = LargeTestModel(long = 3L)
        val lower = LargeTestModel(long = 1L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().long inside listOf<Long>(3L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_inside_nullable")
        val higher = LargeTestModel(longNullable = 3L)
        val isNull = LargeTestModel(longNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().longNullable.notNull inside listOf<Long>(3L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_notIn")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().long notIn listOf<Long>(3L)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Float_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_inside")
        val higher = LargeTestModel(float = 3f)
        val lower = LargeTestModel(float = 1f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().float inside listOf<Float>(3f)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_inside_nullable")
        val higher = LargeTestModel(floatNullable = 3f)
        val isNull = LargeTestModel(floatNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().floatNullable.notNull inside listOf<Float>(3f)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_notIn")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().float notIn listOf<Float>(3f)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Double_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_inside")
        val higher = LargeTestModel(double = 3.0)
        val lower = LargeTestModel(double = 1.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().double inside listOf<Double>(3.0)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_inside_nullable")
        val higher = LargeTestModel(doubleNullable = 3.0)
        val isNull = LargeTestModel(doubleNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull inside listOf<Double>(3.0)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_notIn")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().double notIn listOf<Double>(3.0)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_String_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_inside")
        val higher = LargeTestModel(string = "aca")
        val lower = LargeTestModel(string = "aaa")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().string inside listOf<String>("aca")
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_inside_nullable")
        val higher = LargeTestModel(stringNullable = "aca")
        val isNull = LargeTestModel(stringNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().stringNullable.notNull inside listOf<String>("aca")
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_notIn")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().string notIn listOf<String>("aca")
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Instant_inside() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_inside")
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instant inside listOf<Instant>(Instant.ofEpochMilli(15000L))
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_inside_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_inside_nullable")
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val isNull = LargeTestModel(instantNullable = null)
        val manualList = listOf(isNull, higher)
        collection.insertOne(isNull)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instantNullable.notNull inside listOf<Instant>(Instant.ofEpochMilli(15000L))
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_notIn() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_notIn")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val manualList = listOf(lower, higher)
        collection.insertOne(lower)
        collection.insertOne(higher)
        val condition = startChain<LargeTestModel>().instant notIn listOf<Instant>(Instant.ofEpochMilli(15000L))
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Byte_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_gt")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val middle = LargeTestModel(byte = 2.toByte())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().byte gt 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_lt")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val middle = LargeTestModel(byte = 2.toByte())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().byte lt 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_gte")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val middle = LargeTestModel(byte = 2.toByte())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().byte gte 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_lte")
        val lower = LargeTestModel(byte = 1.toByte())
        val higher = LargeTestModel(byte = 3.toByte())
        val middle = LargeTestModel(byte = 2.toByte())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().byte lte 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_gt_nullable")
        val isNull = LargeTestModel(byteNullable = null)
        val lower = LargeTestModel(byteNullable = 1.toByte())
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val middle = LargeTestModel(byteNullable = 2.toByte())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().byteNullable.notNull gt 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_lt_nullable")
        val isNull = LargeTestModel(byteNullable = null)
        val lower = LargeTestModel(byteNullable = 1.toByte())
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val middle = LargeTestModel(byteNullable = 2.toByte())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().byteNullable.notNull lt 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_gte_nullable")
        val isNull = LargeTestModel(byteNullable = null)
        val lower = LargeTestModel(byteNullable = 1.toByte())
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val middle = LargeTestModel(byteNullable = 2.toByte())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().byteNullable.notNull gte 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Byte_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_lte_nullable")
        val isNull = LargeTestModel(byteNullable = null)
        val lower = LargeTestModel(byteNullable = 1.toByte())
        val higher = LargeTestModel(byteNullable = 3.toByte())
        val middle = LargeTestModel(byteNullable = 2.toByte())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().byteNullable.notNull lte 2.toByte()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Short_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_gt")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val middle = LargeTestModel(short = 2.toShort())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().short gt 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_lt")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val middle = LargeTestModel(short = 2.toShort())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().short lt 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_gte")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val middle = LargeTestModel(short = 2.toShort())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().short gte 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_lte")
        val lower = LargeTestModel(short = 1.toShort())
        val higher = LargeTestModel(short = 3.toShort())
        val middle = LargeTestModel(short = 2.toShort())
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().short lte 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_gt_nullable")
        val isNull = LargeTestModel(shortNullable = null)
        val lower = LargeTestModel(shortNullable = 1.toShort())
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val middle = LargeTestModel(shortNullable = 2.toShort())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().shortNullable.notNull gt 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_lt_nullable")
        val isNull = LargeTestModel(shortNullable = null)
        val lower = LargeTestModel(shortNullable = 1.toShort())
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val middle = LargeTestModel(shortNullable = 2.toShort())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().shortNullable.notNull lt 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_gte_nullable")
        val isNull = LargeTestModel(shortNullable = null)
        val lower = LargeTestModel(shortNullable = 1.toShort())
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val middle = LargeTestModel(shortNullable = 2.toShort())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().shortNullable.notNull gte 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Short_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_lte_nullable")
        val isNull = LargeTestModel(shortNullable = null)
        val lower = LargeTestModel(shortNullable = 1.toShort())
        val higher = LargeTestModel(shortNullable = 3.toShort())
        val middle = LargeTestModel(shortNullable = 2.toShort())
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().shortNullable.notNull lte 2.toShort()
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Int_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_gt")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val middle = LargeTestModel(int = 2)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().int gt 2
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_lt")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val middle = LargeTestModel(int = 2)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().int lt 2
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_gte")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val middle = LargeTestModel(int = 2)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().int gte 2
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_lte")
        val lower = LargeTestModel(int = 1)
        val higher = LargeTestModel(int = 3)
        val middle = LargeTestModel(int = 2)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().int lte 2
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_gt_nullable")
        val isNull = LargeTestModel(intNullable = null)
        val lower = LargeTestModel(intNullable = 1)
        val higher = LargeTestModel(intNullable = 3)
        val middle = LargeTestModel(intNullable = 2)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().intNullable.notNull gt 2
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_lt_nullable")
        val isNull = LargeTestModel(intNullable = null)
        val lower = LargeTestModel(intNullable = 1)
        val higher = LargeTestModel(intNullable = 3)
        val middle = LargeTestModel(intNullable = 2)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().intNullable.notNull lt 2
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_gte_nullable")
        val isNull = LargeTestModel(intNullable = null)
        val lower = LargeTestModel(intNullable = 1)
        val higher = LargeTestModel(intNullable = 3)
        val middle = LargeTestModel(intNullable = 2)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().intNullable.notNull gte 2
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Int_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_lte_nullable")
        val isNull = LargeTestModel(intNullable = null)
        val lower = LargeTestModel(intNullable = 1)
        val higher = LargeTestModel(intNullable = 3)
        val middle = LargeTestModel(intNullable = 2)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().intNullable.notNull lte 2
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Long_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_gt")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val middle = LargeTestModel(long = 2L)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().long gt 2L
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_lt")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val middle = LargeTestModel(long = 2L)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().long lt 2L
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_gte")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val middle = LargeTestModel(long = 2L)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().long gte 2L
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_lte")
        val lower = LargeTestModel(long = 1L)
        val higher = LargeTestModel(long = 3L)
        val middle = LargeTestModel(long = 2L)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().long lte 2L
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_gt_nullable")
        val isNull = LargeTestModel(longNullable = null)
        val lower = LargeTestModel(longNullable = 1L)
        val higher = LargeTestModel(longNullable = 3L)
        val middle = LargeTestModel(longNullable = 2L)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().longNullable.notNull gt 2L
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_lt_nullable")
        val isNull = LargeTestModel(longNullable = null)
        val lower = LargeTestModel(longNullable = 1L)
        val higher = LargeTestModel(longNullable = 3L)
        val middle = LargeTestModel(longNullable = 2L)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().longNullable.notNull lt 2L
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_gte_nullable")
        val isNull = LargeTestModel(longNullable = null)
        val lower = LargeTestModel(longNullable = 1L)
        val higher = LargeTestModel(longNullable = 3L)
        val middle = LargeTestModel(longNullable = 2L)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().longNullable.notNull gte 2L
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Long_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_lte_nullable")
        val isNull = LargeTestModel(longNullable = null)
        val lower = LargeTestModel(longNullable = 1L)
        val higher = LargeTestModel(longNullable = 3L)
        val middle = LargeTestModel(longNullable = 2L)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().longNullable.notNull lte 2L
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Float_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_gt")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val middle = LargeTestModel(float = 2f)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().float gt 2f
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_lt")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val middle = LargeTestModel(float = 2f)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().float lt 2f
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_gte")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val middle = LargeTestModel(float = 2f)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().float gte 2f
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_lte")
        val lower = LargeTestModel(float = 1f)
        val higher = LargeTestModel(float = 3f)
        val middle = LargeTestModel(float = 2f)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().float lte 2f
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_gt_nullable")
        val isNull = LargeTestModel(floatNullable = null)
        val lower = LargeTestModel(floatNullable = 1f)
        val higher = LargeTestModel(floatNullable = 3f)
        val middle = LargeTestModel(floatNullable = 2f)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().floatNullable.notNull gt 2f
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_lt_nullable")
        val isNull = LargeTestModel(floatNullable = null)
        val lower = LargeTestModel(floatNullable = 1f)
        val higher = LargeTestModel(floatNullable = 3f)
        val middle = LargeTestModel(floatNullable = 2f)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().floatNullable.notNull lt 2f
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_gte_nullable")
        val isNull = LargeTestModel(floatNullable = null)
        val lower = LargeTestModel(floatNullable = 1f)
        val higher = LargeTestModel(floatNullable = 3f)
        val middle = LargeTestModel(floatNullable = 2f)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().floatNullable.notNull gte 2f
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Float_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_lte_nullable")
        val isNull = LargeTestModel(floatNullable = null)
        val lower = LargeTestModel(floatNullable = 1f)
        val higher = LargeTestModel(floatNullable = 3f)
        val middle = LargeTestModel(floatNullable = 2f)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().floatNullable.notNull lte 2f
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Double_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_gt")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val middle = LargeTestModel(double = 2.0)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().double gt 2.0
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_lt")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val middle = LargeTestModel(double = 2.0)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().double lt 2.0
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_gte")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val middle = LargeTestModel(double = 2.0)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().double gte 2.0
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_lte")
        val lower = LargeTestModel(double = 1.0)
        val higher = LargeTestModel(double = 3.0)
        val middle = LargeTestModel(double = 2.0)
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().double lte 2.0
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_gt_nullable")
        val isNull = LargeTestModel(doubleNullable = null)
        val lower = LargeTestModel(doubleNullable = 1.0)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val middle = LargeTestModel(doubleNullable = 2.0)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull gt 2.0
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_lt_nullable")
        val isNull = LargeTestModel(doubleNullable = null)
        val lower = LargeTestModel(doubleNullable = 1.0)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val middle = LargeTestModel(doubleNullable = 2.0)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull lt 2.0
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_gte_nullable")
        val isNull = LargeTestModel(doubleNullable = null)
        val lower = LargeTestModel(doubleNullable = 1.0)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val middle = LargeTestModel(doubleNullable = 2.0)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull gte 2.0
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Double_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_lte_nullable")
        val isNull = LargeTestModel(doubleNullable = null)
        val lower = LargeTestModel(doubleNullable = 1.0)
        val higher = LargeTestModel(doubleNullable = 3.0)
        val middle = LargeTestModel(doubleNullable = 2.0)
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().doubleNullable.notNull lte 2.0
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_String_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_gt")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val middle = LargeTestModel(string = "aba")
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().string gt "aba"
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_lt")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val middle = LargeTestModel(string = "aba")
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().string lt "aba"
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_gte")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val middle = LargeTestModel(string = "aba")
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().string gte "aba"
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_lte")
        val lower = LargeTestModel(string = "aaa")
        val higher = LargeTestModel(string = "aca")
        val middle = LargeTestModel(string = "aba")
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().string lte "aba"
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_gt_nullable")
        val isNull = LargeTestModel(stringNullable = null)
        val lower = LargeTestModel(stringNullable = "aaa")
        val higher = LargeTestModel(stringNullable = "aca")
        val middle = LargeTestModel(stringNullable = "aba")
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().stringNullable.notNull gt "aba"
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_lt_nullable")
        val isNull = LargeTestModel(stringNullable = null)
        val lower = LargeTestModel(stringNullable = "aaa")
        val higher = LargeTestModel(stringNullable = "aca")
        val middle = LargeTestModel(stringNullable = "aba")
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().stringNullable.notNull lt "aba"
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_gte_nullable")
        val isNull = LargeTestModel(stringNullable = null)
        val lower = LargeTestModel(stringNullable = "aaa")
        val higher = LargeTestModel(stringNullable = "aca")
        val middle = LargeTestModel(stringNullable = "aba")
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().stringNullable.notNull gte "aba"
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_String_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_lte_nullable")
        val isNull = LargeTestModel(stringNullable = null)
        val lower = LargeTestModel(stringNullable = "aaa")
        val higher = LargeTestModel(stringNullable = "aca")
        val middle = LargeTestModel(stringNullable = "aba")
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().stringNullable.notNull lte "aba"
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Instant_gt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_gt")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().instant gt Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_lt() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_lt")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().instant lt Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_gte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_gte")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().instant gte Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_lte() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_lte")
        val lower = LargeTestModel(instant = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instant = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        val condition = startChain<LargeTestModel>().instant lte Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_gt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_gt_nullable")
        val isNull = LargeTestModel(instantNullable = null)
        val lower = LargeTestModel(instantNullable = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().instantNullable.notNull gt Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_lt_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_lt_nullable")
        val isNull = LargeTestModel(instantNullable = null)
        val lower = LargeTestModel(instantNullable = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().instantNullable.notNull lt Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(middle !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_gte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_gte_nullable")
        val isNull = LargeTestModel(instantNullable = null)
        val lower = LargeTestModel(instantNullable = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().instantNullable.notNull gte Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, higher)
        assertTrue(lower !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    
    @Test fun test_Instant_lte_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_lte_nullable")
        val isNull = LargeTestModel(instantNullable = null)
        val lower = LargeTestModel(instantNullable = Instant.ofEpochMilli(5000L))
        val higher = LargeTestModel(instantNullable = Instant.ofEpochMilli(15000L))
        val middle = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        val manualList = listOf(lower, higher, middle, isNull)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(middle)
        collection.insertOne(isNull)
        val condition = startChain<LargeTestModel>().instantNullable.notNull lte Instant.ofEpochMilli(10000L)
        val results = collection.find(condition).toList()
        assertContains(results, middle)
        assertContains(results, lower)
        assertTrue(higher !in results)
        assertTrue(isNull !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }

    // endregion autogenerated conditions

    @Test fun test_embedded_subcondition() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_embedded")
        val matching = LargeTestModel(embedded = ClassUsedForEmbedding("asdf", 1))
        val default = LargeTestModel()
        val manualList = listOf(matching, default)
        collection.insertOne(matching)
        collection.insertOne(default)
        val condition = startChain<LargeTestModel>().embedded.value1 eq "asdf"
        val results = collection.find(condition).toList()
        assertContains(results, matching)
        assertTrue(default !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }

    @Test fun test_List_all() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_all")
        val lower = LargeTestModel(list = listOf(1, 2, 3))
        val higher = LargeTestModel(list = listOf(1, 2, 6))
        val allOut = LargeTestModel(list = listOf(5, 6, 7))
        val manualList = listOf(lower, higher, allOut)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(allOut)
        val condition = startChain<LargeTestModel>().list.all { it lt 4 }
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertTrue(allOut !in results)
        assertTrue(higher !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_List_any() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_any")
        val lower = LargeTestModel(list = listOf(1, 2, 3))
        val higher = LargeTestModel(list = listOf(1, 2, 6))
        val allOut = LargeTestModel(list = listOf(5, 6, 7))
        val manualList = listOf(lower, higher, allOut)
        collection.insertOne(lower)
        collection.insertOne(higher)
        collection.insertOne(allOut)
        val condition = startChain<LargeTestModel>().list.any { it lt 4 }
        val results = collection.find(condition).toList()
        assertContains(results, lower)
        assertContains(results, higher)
        assertTrue(allOut !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_List_any_embedded() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_any_embedded")
        val item1 = LargeTestModel(listEmbedded = listOf(ClassUsedForEmbedding(value2 = 1), ClassUsedForEmbedding(value1 = "Other String", value2 = 3)))
        val item2 = LargeTestModel(listEmbedded = listOf(ClassUsedForEmbedding(value2 = 2), ClassUsedForEmbedding(value1 = "five", value2 = 3)))
        collection.insertMany(listOf(item1, item2))
        var condition = startChain<LargeTestModel>().listEmbedded.any { it.value1 eq "five" }
        var results = collection.find(condition).toList()
        assertEquals(1, results.size)
        assertEquals(item2, results.first())

        condition = startChain<LargeTestModel>().listEmbedded.any { it.value2 lt 2 }
        results = collection.find(condition).toList()
        assertEquals(1, results.size)
        assertEquals(item1, results.first())
        Unit
    }
    @Test fun test_List_size() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_size")
        val matchingSize = LargeTestModel(list = listOf(1, 2, 3))
        val notMatchingSize = LargeTestModel(list = listOf(1, 2))
        val manualList = listOf(matchingSize, notMatchingSize)
        collection.insertOne(matchingSize)
        collection.insertOne(notMatchingSize)
        val condition = startChain<LargeTestModel>().list.sizesEquals(3)
        val results = collection.find(condition).toList()
        assertContains(results, matchingSize)
        assertTrue(notMatchingSize !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }

    @Test fun test_Map_exists() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_exists")
        val matching = LargeTestModel(map = mapOf("a" to 42))
        val notMatching = LargeTestModel(map = mapOf("b" to 24))
        val manualList = listOf(matching, notMatching)
        collection.insertOne(matching)
        collection.insertOne(notMatching)
        val condition = startChain<LargeTestModel>().map.containsKey("a")
        println(condition.bson().json)
        val results = collection.find(condition).toList()
        println(results.joinToString("\n"))
        assertContains(results, matching)
        assertTrue(notMatching !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }
    @Test fun test_Map_onField() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_onField")
        val matching = LargeTestModel(map = mapOf("a" to 42))
        val notMatching = LargeTestModel(map = mapOf("a" to 24))
        val manualList = listOf(matching, notMatching)
        collection.insertOne(matching)
        collection.insertOne(notMatching)
        val condition = startChain<LargeTestModel>().map["a"] gt 32
        val results = collection.find(condition).toList()
        assertContains(results, matching)
        assertTrue(notMatching !in results)
        assertEquals(manualList.filter { condition(it) }.sortedBy { it._id }, results.sortedBy { it._id })
        Unit
    }

    @Test
    fun test_not_null_condition() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_notNull_condition")

        val notNullItem = LargeTestModel(stringNullable = "Not Null String")
        val nullItem = LargeTestModel(stringNullable = null)
        collection.insertMany(listOf(notNullItem, nullItem))

        var condition = startChain<LargeTestModel>().stringNullable ne null
        var result = collection.find(condition).toList()
        assertEquals(1, result.size)
        assertEquals(notNullItem, result.first())

        condition = startChain<LargeTestModel>().stringNullable eq null
        result = collection.find(condition).toList()
        assertEquals(1, result.size)
        assertEquals(nullItem, result.first())

        Unit
    }
}