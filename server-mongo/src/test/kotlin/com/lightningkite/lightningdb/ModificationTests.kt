package com.lightningkite.lightningdb

import com.lightningkite.lightningdb.application.*
import kotlinx.coroutines.runBlocking
import org.junit.Test
import java.time.Instant
import kotlin.test.assertEquals

class ModificationTests : MongoTest() {

    // region autogenerated modifications
    @Test fun test_Boolean_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_set")
        val item = LargeTestModel(boolean = false)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().boolean assign true
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(true, result.boolean)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Boolean_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_set_nullable")
        val item = LargeTestModel(booleanNullable = false)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().booleanNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.booleanNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Boolean_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Boolean_set_nullable2")
        val item = LargeTestModel(booleanNullable = false)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().booleanNullable assign true
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(true, result.booleanNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_set")
        val item = LargeTestModel(list = listOf(4, 5, 6))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list assign listOf(7, 8, 9)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(7, 8, 9), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_set_nullable")
        val item = LargeTestModel(listNullable = listOf(4, 5, 6))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().listNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.listNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_set_nullable2")
        val item = LargeTestModel(listNullable = listOf(4, 5, 6))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().listNullable assign listOf(7, 8, 9)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(7, 8, 9), result.listNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Map_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_set")
        val item = LargeTestModel(map = mapOf("b" to 2))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().map assign mapOf("c" to 3)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(mapOf("c" to 3), result.map)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Map_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_set_nullable")
        val item = LargeTestModel(mapNullable = mapOf("b" to 2))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().mapNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.mapNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Map_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_set_nullable2")
        val item = LargeTestModel(mapNullable = mapOf("b" to 2))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().mapNullable assign mapOf("c" to 3)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(mapOf("c" to 3), result.mapNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_set")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte assign 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_set_nullable")
        val item = LargeTestModel(byteNullable = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byteNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.byteNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_set_nullable2")
        val item = LargeTestModel(byteNullable = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byteNullable assign 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toByte(), result.byteNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_set")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short assign 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_set_nullable")
        val item = LargeTestModel(shortNullable = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().shortNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.shortNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_set_nullable2")
        val item = LargeTestModel(shortNullable = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().shortNullable assign 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toShort(), result.shortNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_set")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int assign 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3, result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_set_nullable")
        val item = LargeTestModel(intNullable = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().intNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.intNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_set_nullable2")
        val item = LargeTestModel(intNullable = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().intNullable assign 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3, result.intNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_set")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long assign 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3L, result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_set_nullable")
        val item = LargeTestModel(longNullable = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().longNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.longNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_set_nullable2")
        val item = LargeTestModel(longNullable = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().longNullable assign 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3L, result.longNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_set")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float assign 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3f, result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_set_nullable")
        val item = LargeTestModel(floatNullable = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().floatNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.floatNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_set_nullable2")
        val item = LargeTestModel(floatNullable = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().floatNullable assign 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3f, result.floatNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_set")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double assign 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.0, result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_set_nullable")
        val item = LargeTestModel(doubleNullable = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().doubleNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.doubleNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_set_nullable2")
        val item = LargeTestModel(doubleNullable = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().doubleNullable assign 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.0, result.doubleNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_set")
        val item = LargeTestModel(string = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().string assign "aca"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aca", result.string)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_set_nullable")
        val item = LargeTestModel(stringNullable = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().stringNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.stringNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_set_nullable2")
        val item = LargeTestModel(stringNullable = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().stringNullable assign "aca"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aca", result.stringNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_set() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_set")
        val item = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instant assign Instant.ofEpochMilli(15000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(15000L), result.instant)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_set_nullable() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_set_nullable")
        val item = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instantNullable assign null
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(null, result.instantNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_set_nullable2() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_set_nullable2")
        val item = LargeTestModel(instantNullable = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instantNullable assign Instant.ofEpochMilli(15000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(15000L), result.instantNullable)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_coerceAtMost")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte coerceAtMost 1.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1.toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_coerceAtMost_miss")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte coerceAtMost 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_coerceAtLeast")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte coerceAtLeast 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_coerceAtLeast_miss")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte coerceAtLeast 1.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_coerceAtMost")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short coerceAtMost 1.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1.toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_coerceAtMost_miss")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short coerceAtMost 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_coerceAtLeast")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short coerceAtLeast 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_coerceAtLeast_miss")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short coerceAtLeast 1.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_coerceAtMost")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int coerceAtMost 1
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1, result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_coerceAtMost_miss")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int coerceAtMost 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2, result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_coerceAtLeast")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int coerceAtLeast 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3, result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_coerceAtLeast_miss")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int coerceAtLeast 1
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2, result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_coerceAtMost")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long coerceAtMost 1L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1L, result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_coerceAtMost_miss")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long coerceAtMost 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2L, result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_coerceAtLeast")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long coerceAtLeast 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3L, result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_coerceAtLeast_miss")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long coerceAtLeast 1L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2L, result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_coerceAtMost")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float coerceAtMost 1f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1f, result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_coerceAtMost_miss")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float coerceAtMost 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2f, result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_coerceAtLeast")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float coerceAtLeast 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3f, result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_coerceAtLeast_miss")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float coerceAtLeast 1f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2f, result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_coerceAtMost")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double coerceAtMost 1.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(1.0, result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_coerceAtMost_miss")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double coerceAtMost 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.0, result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_coerceAtLeast")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double coerceAtLeast 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(3.0, result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_coerceAtLeast_miss")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double coerceAtLeast 1.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(2.0, result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_coerceAtMost")
        val item = LargeTestModel(string = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().string coerceAtMost "aaa"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aaa", result.string)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_coerceAtMost_miss")
        val item = LargeTestModel(string = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().string coerceAtMost "aca"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aba", result.string)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_coerceAtLeast")
        val item = LargeTestModel(string = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().string coerceAtLeast "aca"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aca", result.string)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_String_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_String_coerceAtLeast_miss")
        val item = LargeTestModel(string = "aba")
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().string coerceAtLeast "aaa"
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals("aba", result.string)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_coerceAtMost() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_coerceAtMost")
        val item = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instant coerceAtMost Instant.ofEpochMilli(5000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(5000L), result.instant)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_coerceAtMost_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_coerceAtMost_miss")
        val item = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instant coerceAtMost Instant.ofEpochMilli(15000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(10000L), result.instant)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_coerceAtLeast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_coerceAtLeast")
        val item = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instant coerceAtLeast Instant.ofEpochMilli(15000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(15000L), result.instant)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Instant_coerceAtLeast_miss() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Instant_coerceAtLeast_miss")
        val item = LargeTestModel(instant = Instant.ofEpochMilli(10000L))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().instant coerceAtLeast Instant.ofEpochMilli(5000L)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(Instant.ofEpochMilli(10000L), result.instant)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_inc")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte + 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.toByte() + 2.toByte()).toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Byte_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Byte_mul")
        val item = LargeTestModel(byte = 2.toByte())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().byte * 3.toByte()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.toByte() * 2.toByte()).toByte(), result.byte)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_inc")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short + 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.toShort() + 2.toShort()).toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Short_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Short_mul")
        val item = LargeTestModel(short = 2.toShort())
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().short * 3.toShort()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.toShort() * 2.toShort()).toShort(), result.short)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_inc")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int + 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3 + 2).toInt(), result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Int_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Int_mul")
        val item = LargeTestModel(int = 2)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().int * 3
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3 * 2).toInt(), result.int)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_inc")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long + 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3L + 2L).toLong(), result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Long_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Long_mul")
        val item = LargeTestModel(long = 2L)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().long * 3L
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3L * 2L).toLong(), result.long)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_inc")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float + 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3f + 2f).toFloat(), result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Float_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Float_mul")
        val item = LargeTestModel(float = 2f)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().float * 3f
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3f * 2f).toFloat(), result.float)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_inc() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_inc")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double + 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.0 + 2.0).toDouble(), result.double)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Double_mul() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Double_mul")
        val item = LargeTestModel(double = 2.0)
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().double * 3.0
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals((3.0 * 2.0).toDouble(), result.double)
        assertEquals(modification(item), result)
        Unit
    }

    // endregion autogenerated modifications

    @Test fun test_List_addToSet() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_addToSet")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.addUnique(listOf(3, 4, 5))
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1, 2, 3, 4, 5), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_push() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_push")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.addAll(listOf(3, 4, 5))
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1, 2, 3, 3, 4, 5), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_pull() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_pull")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.removeAll { it gt 1 }
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_pull_embedded() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("test_List_pull_embedded")
        val item = LargeTestModel(listEmbedded = listOf(ClassUsedForEmbedding(value2 = 1), ClassUsedForEmbedding(value2 = 2)))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().listEmbedded.removeAll { it.value2 gt 1 }
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(ClassUsedForEmbedding(value2 = 1)), result.listEmbedded)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_pullAll() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_pullAll")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.removeAll(listOf(2, 3))
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_popFirst()  = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_popFirst")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.dropFirst()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(2, 3), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_popLast() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_popLast")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.dropLast()
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1, 2), result.list)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_List_matching() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_List_matching")
        val item = LargeTestModel(list = listOf(1, 2, 3))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().list.mapIf({ it gt 2 }, { it * 2 })
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(listOf(1, 2, 6), result.list)
        assertEquals(modification(item), result)
        Unit
    }

    @Test fun test_Map_setField() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_setField")
        val item = LargeTestModel(map = mapOf("a" to 1))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().map + mapOf("b" to 2)
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(mapOf("a" to 1, "b" to 2), result.map)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Map_modifyField() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_setField")
        val item = LargeTestModel(map = mapOf("a" to 1))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().map.modifyByKey(mapOf(
            "a" to { it + 1 }
        ))
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(mapOf("a" to 2), result.map)
        assertEquals(modification(item), result)
        Unit
    }
    @Test fun test_Map_unsetField() = runBlocking {
        val collection = defaultMongo.collection<LargeTestModel>("LargeTestModel_test_Map_setField")
        val item = LargeTestModel(map = mapOf("a" to 1, "b" to 2))
        collection.insertOne(item)
        val modification = startChain<LargeTestModel>().map.removeKeys(setOf("a"))
        collection.updateOneById(item._id, modification)
        val result = collection.get(item._id)!!
        assertEquals(mapOf("b" to 2), result.map)
        assertEquals(modification(item), result)
        Unit
    }

    @Test fun san(){
        val before = LargeTestModel(stringNullable = "true")
        val after = (startChain<LargeTestModel>().stringNullable assign null)(before)
        println(before.stringNullable)
        println(after.stringNullable)
    }
}